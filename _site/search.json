[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Simon’s notebook",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/swab-sampling/index.html",
    "href": "posts/swab-sampling/index.html",
    "title": "Pooled swab sampling for pathogen early detection",
    "section": "",
    "text": "Code\n# Importing packages\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom collections import defaultdict\nimport random\nimport math"
  },
  {
    "objectID": "posts/swab-sampling/index.html#pathogen-shedding",
    "href": "posts/swab-sampling/index.html#pathogen-shedding",
    "title": "Pooled swab sampling for pathogen early detection",
    "section": "Pathogen shedding",
    "text": "Pathogen shedding\nAmong many types of pathogens, respiratory pathogens are particularly likely to cause future pandemics (Amesh A. Adalja, MD, Matthew Watson, …). Though different pathogens have different tropism across tissues (SARS-CoV-2 having a wider wider tropism than influenza (Flerlage et al. 2021)), all of them are respiratory pathogens and thus shed in the respiratory tract, which includes the pharynx, mouth, and nose.\nIn a swab sampling program we could use different swabs that target any of these sitesm, i.e., the nostrils, the nasopharynx, oropharynx, and the mid-turbinate region1. These sites differ in their comfort of sampling and (probably) in their sensitivity. For instance, nasopharyngeal swabs (NP swabs) would have be far better than other swabs for us to consider them for a sampling program, given that they do not allow self-sampling.\nWe will evaluate the performance of different swab types in three ways:\n\nSensitivity: Is the pathogen present at all?\nViral load: How much of the pathogen can be measured? This metric is based on the qPCR cycle threshold of quantiative.\nRelative abundance: When performing untargeted sequencing, what is the relative abundance of a pathogen?\n\n\nSensitivity of different swab types\n(Tsang et al. 2021) performed a meta-analysis to evaluate the ability of different swab types in detecting SARS-CoV-2 using qPCR. Swab types included nasal swabs (n=1622), throat swabs (n=388), and pooled nasal and throat swabs (n=719), each of which were compared to nasopharyngeal swabs. Overall, pooled nasal/throat swabs have the best diagnostic performance with sensitivity of 0.97 (0.93-1.00).\n\nTable 1: Comparison of different swab sample types. Adapted from (Tsang et al. 2021). Values are effect sizes under a random effects-model. The gold standard is nasopharyngeal swabs.\n\n\n\n\n\n\n\n\n\nSample Type\nSensitivity\nSpecificity\nPositive Predictive Value\nNegative Predictive Value\n\n\n\n\nNasal swabs (n=1622)\n0.86 (0.77-0.93)\n0.99 (0.96-1.00)\n0.96 (0.87-1.00)\n0.95 (0.88-0.99)\n\n\nThroat swabs (n=388)\n0.68 (0-35-0.94)\n0.97 (0.95-0.99)\n0.75 (0.45-0.96)\n0.96 (0.94-0.98)\n\n\nPooled nasal/throat swabs (n=719)\n0.97 (0.93-1.00)\n0.99 (0.98-1.00)\n0.97 (0.90-1.00)\n0.99 (0.98-1.00)\n\n\n\nNote, though Tsang et al. 2021 reports specificity, this metric isn’t very useful in this context. All studies covered by the review used qPCR to detect SARS-CoV-2. qPCR is generally considered to be very sensitive and specific. Thus, if a patient tests positive in a throat swab qPCR, but negative in nasopharyngeal swab qPCR, this shouldn’t be counted against throat swabs (false positive), but rather against nasopharyngeal swabs.\nThe review above gives us binary information about SARS-CoV-2 being present in different swab types. But we are not merely interested in a pathogen being present in a sample, but how abundant said pathogen is. For instance, hroat swabs coming back negative when NP swabs come back positive tells us that pathogen abundance is likely higher in the nasopharynx, but it’s unclear by how much.\nGetting a better understanding of this is particularly relevant when pooling samples because higher relative abundance in an individual positive sample will ensure detection even if said sample is pooled with a large number of negative samples. To quantify this difference in absolute pathogen abundance between sample types we can look beyond positive/negative comparisons and instead look at the differences in CT scores within studies that compared swab types.\n\n\nViral load in different swab types\n\nNasopharyngeal swabs\nMost studies on swab sampling performance treat nasopharyngeal swabs (NP swabs) as the gold standard, against which, nasal (Kojima et al. 2021; Tu et al. 2020), mid-turbinate (Tu et al. 2020; Muller et al. 2021), and combined nasal/oropharyngeal (Desmet et al. 2021) swabs are compared. NP swabs are commonly administered by a healthcare professional and a properly administered test absorbs material from below the inferior turbinate, and the nasopharynx located at the back of the nasal cavity.\nThe CT value difference for paired NP/{Other} swabs are plotted in Figure 1. The CT value of the comparison swab is subtracted from the NP swab CT value. A lower CT is better, thus, a negative cycle threshold (CT) difference equates to a higher pathogen concentration in the NP swab.\n\n\nCode\n# All CT difference data were calculated in and are taken from https://docs.google.com/spreadsheets/d/1YP4mxT_vxiFwXU5ZuBM4obq_oscfhe05ODWwHFHEznM/\ndf = pd.read_csv(\"data/np_ct_differences.tsv\", sep=\"\\t\", skiprows=1)\ndf.columns = df.columns.str.replace(\", \", \"\\n\")\n\ndf = df.melt(var_name=\"Study & Comparison\", value_name=\"CT Difference\")\n\nfig = plt.figure(figsize=(8, 3.5))\nsns.stripplot(\n    data=df,\n    y=\"Study & Comparison\",\n    x=\"CT Difference\",\n    hue=\"Study & Comparison\",\n    jitter=True,\n)\nplt.legend([], [], frameon=False)\n# drop y axis label\nplt.ylabel(\"\")\nplt.xlabel(\"SARS-CoV-2 qPCR CT Δ (NP - Comparison)\")\nplt.tick_params(axis=\"y\", which=\"both\", left=False, right=False, labelleft=True)\nfor x in 5, 0, -5, -10, -15:\n    if x == 0:\n        plt.axvline(x=x, color=\"red\", linestyle=\"--\", alpha=0.5)\n        continue\n    plt.axvline(x=x, color=\"grey\", linestyle=\"--\", alpha=0.5, linewidth=0.5)\n\nfor y in 0.5, 1.5, 2.5, 3.5, 4.5:\n    plt.axhline(y=y, color=\"grey\", linestyle=\"--\", alpha=0.5, linewidth=0.5)\n\nmin_x, max_x = plt.xlim()\n\nplt.text(max_x / 2, -0.6, \"Favors Comparison\", fontsize=10, color=\"black\", ha=\"center\")\nplt.text(min_x / 2, -0.6, \"Favors NP Swab\", fontsize=10, color=\"black\", ha=\"center\")\n\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"left\"].set_visible(False)\nplt.show()\n\n\n\n\n\nFigure 1: Nasopharyngeal vs Nasal, Mid-Turbinate, and combined Oropharyngeal/ Nasal swabs. Data from Kojima et al. 2020, Tu et al. 2020, Muller et al. 2021, and Desmet et al. 2021.\n\n\n\n\nApart from self-collected mid-turbinate swabs in Tu et al. 2020, NP swabs show equivalent performance to nasal swabs in Kojima et al. 2020, mid-turbinate swabs in Muller et al. 2021, and combined nasal/throat swabs in Desmet et al 2021; and equivalent performance to nasal swabs in Tu et al. 2020. In the same study, nasal swabs prove equivalent to NP swabs. Combined oro-pharyngeal swabs are also equivalent to NP swabs.\nStudies that use NP swabs as their gold standard are useful to better understand the performance of other swab types, but NP swabs themselves are not practical for a large-scale pooled sampling programs: NP swabs are notoriously uncomfortable and are commonly administered by a third person. In contrast, nasal or oropharyngeal swabs would be more suitable for self-sampling, which allows far higher testing throughput. Let’s thus look at studies that compare nasal and oropharyngeal swabs.\n\n\n\nNasal Swabs\nNote that the second plot shows the difference in genome copy numbers, rather than CT values2.\n\n\nCode\ndf = pd.read_csv(\"data/nasal_ct_differences.tsv\", sep=\"\\t\", skiprows=1)\n\ndf.columns = df.columns.str.replace(\", \", \"\\n\")\n# reshape dataframe to long format\ndf = df.melt(var_name=\"Study & Comparison\", value_name=\"CT Difference\")\n\n\nfig = plt.figure(figsize=(8, 1.5))\nsns.stripplot(\n    data=df,\n    y=\"Study & Comparison\",\n    x=\"CT Difference\",\n    hue=\"Study & Comparison\",\n    jitter=True,\n)\nplt.legend([], [], frameon=False)\n# drop y axis label\nplt.ylabel(\"\")\nplt.xlabel(\"SARS-CoV-2 qPCR CT Δ (Nasal - Comparison)\")\nplt.tick_params(axis=\"y\", which=\"both\", left=False, right=False, labelleft=True)\n\nfor x in 5, 0, -5, -10, -15:\n    if x == 0:\n        plt.axvline(x=x, color=\"red\", linestyle=\"--\", alpha=0.5)\n    else:\n        plt.axvline(x=x, color=\"grey\", linestyle=\"--\", alpha=0.5, linewidth=0.5)\n\nplt.axhline(y=0.5, color=\"grey\", linestyle=\"--\", alpha=0.5, linewidth=0.5)\n\nmin_x, max_x = plt.xlim()\n\nplt.text(max_x / 2, -0.6, \"Favors Comparison\", fontsize=10, color=\"black\", ha=\"center\")\nplt.text(min_x / 2, -0.6, \"Favors Nasal Swab\", fontsize=10, color=\"black\", ha=\"center\")\n\n\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"left\"].set_visible(False)\n\nplt.show()\n\n\n\n\n\nFigure 2: Nasal swabs vs Oro-pharyngeal and combined nasal/oro-pharyngeal swabs. All data is taken from Goodall et al. 2022.\n\n\n\n\n\n\nCode\n# All CT difference data was calculated and is taken from https://docs.google.com/spreadsheets/d/1YP4mxT_vxiFwXU5ZuBM4obq_oscfhe05ODWwHFHEznM/\n\n# turn tsv into dataframe. Ignore first row. Second row is column names.\ndf = pd.read_csv(\"data/leung_genome_copy_differences.tsv\", sep=\"\\t\", skiprows=1)\n\n\ndf = df.melt(var_name=\"Study & Comparison\", value_name=\"Genome Copy Number Difference\")\n\ndf[\"Study & Comparison\"] = df[\"Study & Comparison\"].str.split(\",\").str[-1]\nfig = plt.figure(figsize=(8, 2))\nsns.stripplot(\n    data=df,\n    y=\"Study & Comparison\",\n    x=\"Genome Copy Number Difference\",\n    hue=\"Study & Comparison\",\n    jitter=True,\n)\nplt.legend([], [], frameon=False)\n# drop y axis label\nplt.ylabel(\"\")\nplt.xlabel(\"Genome Copy Number Δ (Nasal - Throat), Logged\")\n# flip x axis\nplt.gca().invert_xaxis()\nplt.tick_params(axis=\"y\", which=\"both\", left=False, right=False, labelleft=True)\nfor x in -2, 0, 2, 4, 6:\n    if x == 0:\n        plt.axvline(x=x, color=\"red\", linestyle=\"--\", alpha=0.5)\n        continue\n    plt.axvline(x=x, color=\"grey\", linestyle=\"--\", alpha=0.5, linewidth=0.5)\n\nfor y in 0.5, 1.5:\n    plt.axhline(y=y, color=\"grey\", linestyle=\"--\", alpha=0.5, linewidth=0.5)\n\nmin_x, max_x = plt.xlim()\n\nplt.text(max_x / 2, -0.6, \"Favors Throat Swab\", fontsize=10, color=\"black\", ha=\"center\")\nplt.text(min_x / 2, -0.6, \"Favors Nasal Swab\", fontsize=10, color=\"black\", ha=\"center\")\n\nplt.gca().spines[\"right\"].set_visible(False)\nplt.gca().spines[\"top\"].set_visible(False)\nplt.gca().spines[\"left\"].set_visible(False)\n\nplt.show()\n\n\n\n\n\nFigure 3: Nasal swabs vs Oro-pharyngeal swabs. All data is taken from Leung et al. 2020.\n\n\n\n\nIn qPCR measurements, nasal swabs contain more virus copies than throat swabs. In (Goodall et al. 2022), nasal swabs are slightly superior to throat swabs and combined/nasal throat swabs, and come out about even when compared to combined nasal/OP swabs. In (Leung et al. 2020), researchers ran multiplex-PCR on both nasal and throat swamples. qPCR differences are plotted in Figure 3 for Human Coronavirus, Influenza, and Rhinovirus."
  },
  {
    "objectID": "posts/swab-sampling/index.html#next-steps",
    "href": "posts/swab-sampling/index.html#next-steps",
    "title": "Pooled swab sampling for pathogen early detection",
    "section": "Next steps",
    "text": "Next steps\n\nPull in additional qPCR studies.\nRead into research on comparing CT values across studies and search for standard curves in existing papers.\nLay out what you would do if you had standard curves available.\n\nCreate a figure for the remaining viruses not covered in Figure 3."
  },
  {
    "objectID": "posts/swab-sampling/index.html#footnotes",
    "href": "posts/swab-sampling/index.html#footnotes",
    "title": "Pooled swab sampling for pathogen early detection",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe mid-turbinate region is the area between the nasal opening (Nares) and the nasopharynx.↩︎\nA 1-log difference in genome copy number is equivalent to a 3.3 CT difference. This is because each cycle in a qPCR machine approxiately equates to doubling of the genome copy number.↩︎\nSee McClaren et al. 2019 for further discussion.↩︎"
  },
  {
    "objectID": "posts/quarto-test/index.html",
    "href": "posts/quarto-test/index.html",
    "title": "Test Quarto Markdown",
    "section": "",
    "text": "I turned on the table of contents in the YAML front matter. It should automatically show up on the right side of the blog post, staying there while scrolling up and down the blog post."
  },
  {
    "objectID": "posts/quarto-test/index.html#text-formatting",
    "href": "posts/quarto-test/index.html#text-formatting",
    "title": "Test Quarto Markdown",
    "section": "Text Formatting",
    "text": "Text Formatting\nHere are various text formatting options in Quarto:\n\n\nItalics, bold, and bold italics\n\nSuperscript2 and subscript2\n\nStrikethrough\nVerbatim code"
  },
  {
    "objectID": "posts/quarto-test/index.html#headings",
    "href": "posts/quarto-test/index.html#headings",
    "title": "Test Quarto Markdown",
    "section": "Headings",
    "text": "Headings\nDemonstration of heading levels in Quarto:"
  },
  {
    "objectID": "posts/quarto-test/index.html#header-2",
    "href": "posts/quarto-test/index.html#header-2",
    "title": "Test Quarto Markdown",
    "section": "Header 2",
    "text": "Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "posts/quarto-test/index.html#written-text",
    "href": "posts/quarto-test/index.html#written-text",
    "title": "Test Quarto Markdown",
    "section": "Written Text",
    "text": "Written Text\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  },
  {
    "objectID": "posts/quarto-test/index.html#lists",
    "href": "posts/quarto-test/index.html#lists",
    "title": "Test Quarto Markdown",
    "section": "Lists",
    "text": "Lists\n\nunordered list\n\nsub-item 1\nsub-item 2\n\nanother item\n\n\n\n\n\n\nordered list\nitem 2\n\nsub-item 1\n\nsub-sub-item 1"
  },
  {
    "objectID": "posts/quarto-test/index.html#math",
    "href": "posts/quarto-test/index.html#math",
    "title": "Test Quarto Markdown",
    "section": "Math",
    "text": "Math\nInline math: \\(E = mc^{2}\\)\nDisplay math:\n\\[E = mc^{2}\\]"
  },
  {
    "objectID": "posts/quarto-test/index.html#quotes",
    "href": "posts/quarto-test/index.html#quotes",
    "title": "Test Quarto Markdown",
    "section": "Quotes",
    "text": "Quotes\nHere is a quote:\n\n“This is a quote.”"
  },
  {
    "objectID": "posts/quarto-test/index.html#showing-a-png",
    "href": "posts/quarto-test/index.html#showing-a-png",
    "title": "Test Quarto Markdown",
    "section": "Showing a png",
    "text": "Showing a png\nHere is a figure with 100% width (it should be the same width as the text)  Here is a figure with 50% width.\n\n\nExample Figure at 50% Size\n\nHere is a paragraph of text for comparison:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\nElephant"
  },
  {
    "objectID": "posts/quarto-test/index.html#figure-with-python",
    "href": "posts/quarto-test/index.html#figure-with-python",
    "title": "Test Quarto Markdown",
    "section": "Figure with Python",
    "text": "Figure with Python\nHere is a figure created in Python:\n\nCodeimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import gamma\n\nx = np.linspace(0, 20, 400)  # x values\na1, b1 = 1, 0.1  # Exponential curve 1 parameters\na2, b2 = 1, 0.2  # Exponential curve 2 parameters\nk, theta = 2, 2  # Gamma distribution parameters\n\nexp_curve1 = a1 * np.exp(b1 * x)\nexp_curve2 = a2 * np.exp(b2 * x)\n\n\nplt.figure(figsize=(10, 6))\nplt.plot(x, exp_curve1, label=\"Exponential Curve 1: a=1, b=0.1\", color=\"blue\")\nplt.plot(x, exp_curve2, label=\"Exponential Curve 2: a=1, b=0.2\", color=\"green\")\nplt.title(\"Example Figure\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend()\nplt.grid(True)\nplt.show()\n\n\n\nFigure Caption: Example figure with two exponential curves."
  },
  {
    "objectID": "posts/quarto-test/index.html#figure-with-r",
    "href": "posts/quarto-test/index.html#figure-with-r",
    "title": "Test Quarto Markdown",
    "section": "Figure with R",
    "text": "Figure with R\nHere is a figure created in R:\n\nCodemtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nlibrary(ggplot2)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "posts/quarto-test/index.html#footnotes",
    "href": "posts/quarto-test/index.html#footnotes",
    "title": "Test Quarto Markdown",
    "section": "Footnotes",
    "text": "Footnotes\n\nThis is the first footnote.↩︎\nThis is the second footnote.↩︎"
  },
  {
    "objectID": "posts/quarto-test/index.html#asides",
    "href": "posts/quarto-test/index.html#asides",
    "title": "Test Quarto Markdown",
    "section": "Asides",
    "text": "Asides\nAsides are a feature by Quarto where you can put text on the right side or left side of your main body of text.\nAside with Latex\nHere is an aside with Latex.\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]\nAside with a figure\nHere is an aside with a figure. We will probably use this quite rarely.\n\nCodemtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nlibrary(ggplot2)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\nFull page figure\nHere is a full page figure, that uses the entire width of the web browser. Here some text for reference:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nCodeplot(cars)\nplot(iris)\nplot(pressure)"
  },
  {
    "objectID": "posts/public-health-data/index.html",
    "href": "posts/public-health-data/index.html",
    "title": "Public Health Data for Project Runway",
    "section": "",
    "text": "This is a summary of the public health data for the state of Massachusetts obtained from the Massachusetts Department of Public Health (MADPH) and the National Respiratory and Enteric Viruses Surveillance System (NREVSS). The MADPH data for both COVID-19 and Influenza looks quite exciting because we see a sharp increase in positive tests and positive test percentages within the Project Runway Coverage Period. Positive tests start to rise at the beginning of November for COVID-19 and at the end of November for Influenza. The data from NREVSS is not as useful because the testing levels are quite a bit lower (positive tests for Flu and COVID-19 reach a maximum of ~4250 and ~6000 respectively, while the most common NREVSS pathogen, Rhinovirus, caps out at ~130.)\nWe still need to decide if we want to create incidence estimates for all of these pathogens. But I already think it will be interesting to check if the sequencing data show an increase in pathogen abundance that matches the rate of increase in testing data."
  },
  {
    "objectID": "posts/public-health-data/index.html#covid-19",
    "href": "posts/public-health-data/index.html#covid-19",
    "title": "Public Health Data for Project Runway",
    "section": "COVID-19",
    "text": "COVID-19\nThe plot below shows data both for the entire state and the counties covered by Deer Island (Suffolk, Norfolk, Middlesex). COVID-19 cases see a decrease until the beginning of November and a sharp increase and peak over the rest of the Project Runway coverage period.\n\n\nCode\nfig, ax1 = plt.subplots(figsize=(8, 6))\n\ndf = df_covid[df_covid['County'].isin(['Suffolk', 'Norfolk', 'Middlesex'])]\ndf[\"date\"] = pd.to_datetime(df[\"Week Start Date\"], format='%m/%d/%y')\n\n\ndf[\"pos_agg\"] = df[\"Positive tests the week\"].groupby(df[\"date\"]).transform('sum')\ndf[\"percent_positive_agg\"] = df[\"pos_agg\"] / df.groupby(\"date\")[\"Tests during the week\"].transform('sum') * 100\n\nax1.set_xlabel('Months (2023-2024)')\nax1.set_ylabel('Positive Percentage')\nax1.plot(df[\"date\"], df[\"percent_positive_agg\"], color='tab:blue', linestyle='--', label='Counties (% Positive)')\nax1.tick_params(axis='y')\n\nax2 = ax1.twinx()\nax2.set_ylabel('Positive Tests per Week')\nax2.plot(df[\"date\"], df[\"pos_agg\"], color='tab:blue', linestyle='-', label='Counties (# Positive)')\nax2.tick_params(axis='y')\n\ndf_ma = df_covid[df_covid['County'] == 'Statewide (all of MA)']\ndf_ma[\"date\"] = pd.to_datetime(df_ma[\"Week Start Date\"], format='%m/%d/%y')\ndf_ma[\"Week percent positivity\"] = df_ma[\"Week percent positivity\"].astype(float)\ndf_ma[\"percent positive\"] = df_ma[\"Week percent positivity\"] * 100\n\nax1.plot(df_ma[\"date\"], df_ma[\"percent positive\"], color='tab:red', linestyle='--', label='MA (% Positive)')\nax2.plot(df_ma[\"date\"], df_ma[\"Positive tests the week\"], color='tab:red', linestyle='-', label='MA (# Positive)')\n\nax1.xaxis.set_major_locator(mdates.MonthLocator())\nax1.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n\nax1_yminlim, ax1_ymaxlim = ax1.get_ylim()\nax1.set_ylim(0, ax1_ymaxlim)\n\nax2_yminlim, ax2_ymaxlim = ax2.get_ylim()\nax2.set_ylim(0, ax2_ymaxlim)\n\nax1.axvspan(pd.to_datetime('2023-10-01'), pd.to_datetime('2023-12-31'), color='lightgrey', alpha=0.5)\nax1.text(pd.to_datetime('2023-11-15'), ax1_ymaxlim * 1.02, 'Project Runway Sampling', fontsize=12, ha='center')\n\nfor y in range(0, int(ax1_ymaxlim) + 1, 2):\n    ax1.axhline(y, color='black', linestyle='-', lw=0.2)\n\nax2.tick_params(axis='y', right=False, left=False)\n\n\nlegend_elements = [Line2D([0], [0], color= 'black',  linestyle='-', label='Positive Tests'),\n                   Line2D([0], [0], color= 'black', linestyle='--', label='Percentage Positivity'),\n                   Line2D([0], [0], color= 'tab:red', linestyle='-', label='Massachusetts'),\n                   Line2D([0], [0], color= 'tab:blue', linestyle='-', label='Suffolk, Norfolk, Middlesex')] \n                  \n\nax1.legend(handles=legend_elements, loc='upper left')\n\nfig.tight_layout()\nplt.show()\nfig.clf()"
  },
  {
    "objectID": "posts/public-health-data/index.html#influenza",
    "href": "posts/public-health-data/index.html#influenza",
    "title": "Public Health Data for Project Runway",
    "section": "Influenza",
    "text": "Influenza\nWe do not have Percentage Positivity data for Influenza. Still, based on the number of positive tests the Influenza season likely started during the PR coverage period.\n\n\nCode\ndf_flu['date'] = pd.to_datetime(df_flu['Week Start Date'], format='%m/%d/%y')\ndf_flu['pos_tests_across_fly_types'] = df_flu.groupby('date')['Positive lab tests'].transform('sum') \ndf = df_flu\nfig, ax = plt.subplots(figsize=(8,6))\nax.set_xlabel('Months (2023-2024)')\nax.set_ylabel('Positive Tests per Week')\nax.plot(df['date'], df['pos_tests_across_fly_types'], color='tab:blue', linestyle='-', label='Positive Tests')\nax.xaxis.set_major_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n\nax_yminlim, ax_ymaxlim = ax.get_ylim()\nax.set_ylim(0, ax_ymaxlim)\n\nfor y in range(0, int(ax_ymaxlim) + 1, 1000):\n    ax.axhline(y, color='black', linestyle='-', lw=0.2)\n\nax.axvspan(pd.to_datetime('2023-10-01'), pd.to_datetime('2023-12-31'), color='lightgrey', alpha=0.5)\nax.text(pd.to_datetime('2023-11-15'), ax_ymaxlim * 1.02, 'Project Runway Sampling', fontsize=12, ha='center')\n\nfig.tight_layout()\nplt.show()\nfig.clf()"
  },
  {
    "objectID": "posts/public-health-data/index.html#respiratory-adenovirus",
    "href": "posts/public-health-data/index.html#respiratory-adenovirus",
    "title": "Public Health Data for Project Runway",
    "section": "Respiratory Adenovirus",
    "text": "Respiratory Adenovirus\n\n\nCode\ndf = df_adeno[df_adeno['TestType'] == 4]\ndf['percent_positive'] = df['RAdenopos'] / df['RAdenotest'] * 100\ndf['RepWeekDate'] = pd.to_datetime(df['RepWeekDate'], dayfirst=True)\nfig, ax1 = plt.subplots(figsize=(8,6))\nax1.set_xlabel('Months (2023-2024)')\nax1.set_ylabel('Positive Percentage', color='tab:blue')\nax1.plot(df['RepWeekDate'], df['percent_positive'], color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx() \ncolor = 'tab:red'\nax2.set_ylabel('Positive Tests per Week', color=color)\nax2.plot(df['RepWeekDate'], df['RAdenopos'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n\nax1.xaxis.set_major_locator(mdates.MonthLocator())\nax1.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n\nax1_yminlim, ax1_ymaxlim = ax1.get_ylim()\nfor y in range(0, int(ax1_ymaxlim) + 1, 2):\n    ax1.axhline(y, color='black', linestyle='-', lw=0.2)\n\nax1.axvspan(pd.to_datetime('2023-10-01'), pd.to_datetime('2023-12-31'), color='lightgrey', alpha=0.5)\nax1.text(pd.to_datetime('2023-11-15'), ax1_ymaxlim * 1.02, 'Project Runway Sampling', fontsize=12, ha='center')\n\nfig.tight_layout()\n\nplt.show()"
  },
  {
    "objectID": "posts/public-health-data/index.html#parainfluenza",
    "href": "posts/public-health-data/index.html#parainfluenza",
    "title": "Public Health Data for Project Runway",
    "section": "Parainfluenza",
    "text": "Parainfluenza\n\n\nCode\ndf = df_parainfluenza[df_parainfluenza['TestType'] == 4]\ndf[\"PIVpos\"] = df[\"PIV1pos\"] + df[\"PIV2pos\"] + df[\"PIV3pos\"] + df[\"PIV4pos\"]\ndf['percent_positive'] = df['PIVpos'] / df['PIVtest'] * 100\ndf['RepWeekDate'] = pd.to_datetime(df['RepWeekDate'], dayfirst=True)\n\nfig, ax1 = plt.subplots(figsize=(8,6))\nax1.set_xlabel('Months (2023-2024)')\nax1.set_ylabel('Positive Percentage', color='tab:blue')\nax1.plot(df['RepWeekDate'], df['percent_positive'], color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx() \ncolor = 'tab:red'\nax2.set_ylabel('Positive Tests per Week', color=color)\nax2.plot(df['RepWeekDate'], df['PIVpos'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n\nax1.xaxis.set_major_locator(mdates.MonthLocator())\nax1.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n\nax1_yminlim, ax1_ymaxlim = ax1.get_ylim()\nfor y in range(0, int(ax1_ymaxlim) + 1, 2):\n    ax1.axhline(y, color='black', linestyle='-', lw=0.2)\n\nax1.axvspan(pd.to_datetime('2023-10-01'), pd.to_datetime('2023-12-31'), color='lightgrey', alpha=0.5)\nax1.text(pd.to_datetime('2023-11-15'), ax1_ymaxlim * 1.02, 'Project Runway Sampling', fontsize=12, ha='center')\n\n\n\n\nfig.tight_layout()"
  },
  {
    "objectID": "posts/public-health-data/index.html#rhinovirus",
    "href": "posts/public-health-data/index.html#rhinovirus",
    "title": "Public Health Data for Project Runway",
    "section": "Rhinovirus",
    "text": "Rhinovirus\n\n\nCode\ndf_rhino['percent_positive'] = df_rhino['Rhinopos'] / df_rhino['Rhinotest'] * 100\ndf_rhino['RepWeekDate'] = pd.to_datetime(df_rhino['RepWeekDate'], dayfirst=True)\n\nfig, ax1 = plt.subplots(figsize=(8, 6))\nax1.set_xlabel('Months (2023)')\nax1.set_ylabel('Positive Percentage', color='tab:blue')\nax1.plot(df_rhino['RepWeekDate'], df_rhino['percent_positive'], color='tab:blue')\nax1.tick_params(axis='y', labelcolor='tab:blue')\n\nax2 = ax1.twinx() \ncolor = 'tab:red'\nax2.set_ylabel('Positive Tests per Week', color=color)\nax2.plot(df_rhino['RepWeekDate'], df_rhino['Rhinopos'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nax1.xaxis.set_major_locator(mdates.MonthLocator())\nax1.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n\nax1_yminlim, ax1_ymaxlim = ax1.get_ylim()\nfor y in range(0, int(ax1_ymaxlim) + 1, 5):\n    ax1.axhline(y, color='black', linestyle='-', lw=0.2)\n\nax1.axvspan(pd.to_datetime('2023-10-01'), pd.to_datetime('2023-12-31'), color='lightgrey', alpha=0.5)\nax1.text(pd.to_datetime('2023-11-15'), ax1_ymaxlim * 1.05, 'Project Runway Sampling', fontsize=12, ha='center')\n\n\n\nfig.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Simon’s NAO Notebook",
    "section": "",
    "text": "Public Health Data for Project Runway\n\n\n\n\n\n\n\n\n\n\n\nMar 20, 2024\n\n\nSimon Grimm\n\n\n\n\n\n\n\n\n\n\n\n\nTest Quarto Markdown\n\n\n\n\n\n\n\n\n\n\n\nFeb 27, 2024\n\n\nSimon Grimm\n\n\n\n\n\n\n\n\n\n\n\n\nPooled swab sampling for pathogen early detection\n\n\n\n\n\n\n\n\n\n\n\nFeb 23, 2024\n\n\nSimon Grimm\n\n\n\n\n\n\nNo matching items"
  }
]