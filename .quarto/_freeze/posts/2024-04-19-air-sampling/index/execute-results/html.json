{
  "hash": "a1ace8cc5178270ebd7fc05775621f1c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Air sampling figure (size distribution)\nauthor: Simon Grimm\ndate: '2024-04-19'\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    code-link: true\n    df-print: paged\neditor: visual\ntoc: true\n---\n\n\n::: {#0f362545 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_cunningham_corr_factor(diameter):\n    λ = 6.4e-8\n    d = diameter\n    A1 = 1.257\n    A2 = 0.400\n    A3 = 0.55\n    Cc = 1 + ((2*λ)/d) * ( A1 + A2*np.exp((-A3*d)/λ) )\n    return Cc\n\ng = 9.81 # m/s^2, G\np = 997 # kg/m^3, density of water (aerosol)\ne = 1.825e-5 # dynamic viscosity of air\n\ntimes = defaultdict(int)\nfor d in np.logspace(-3, -8, num=30):\n    print(d)\n    Cc = get_cunningham_corr_factor(d)\n    term_velocity = (d**2 * g * p * Cc) / (18 * e)\n    time_at_1_5_m = 1 / term_velocity\n    hours = time_at_1_5_m / 3600\n    d_um = d * 1e6\n    times[d_um] = hours\n\nsettling_df = pd.DataFrame(list(times.items()), columns=['Aerosol diameter (um)', 'Residence time in hours'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.001\n0.0006723357536499335\n0.00045203536563602405\n0.0003039195382313198\n0.00020433597178569417\n0.00013738237958832623\n9.236708571873866e-05\n6.210169418915616e-05\n4.1753189365604006e-05\n2.8072162039411757e-05\n1.8873918221350958e-05\n1.2689610031679234e-05\n8.531678524172814e-06\n5.736152510448681e-06\n3.856620421163472e-06\n2.592943797404667e-06\n1.7433288221999873e-06\n1.1721022975334793e-06\n7.880462815669904e-07\n5.298316906283702e-07\n3.562247890262437e-07\n2.395026619987481e-07\n1.6102620275609392e-07\n1.0826367338740541e-07\n7.278953843983146e-08\n4.893900918477489e-08\n3.290344562312664e-08\n2.2122162910704457e-08\n1.4873521072935118e-08\n1e-08\n```\n:::\n:::\n\n\n::: {#f31e9766 .cell execution_count=3}\n``` {.python .cell-code}\nspeaking_df = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nbreathing_df = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\n\n\ndef get_cunningham_corr_factor(diameter):\n    λ = 6.4e-8\n    d = diameter\n    A1 = 1.257\n    A2 = 0.400\n    A3 = 0.55\n    Cc = 1 + ((2*λ)/d) * ( A1 + A2*np.exp((-A3*d)/λ) )\n    return Cc\n\ng = 9.81 # m/s^2, G\np = 997 # kg/m^3, density of water (aerosol)\ne = 1.825e-5 # dynamic viscosity of air\n\ntimes = defaultdict(int)\nfor d in np.logspace(-3.4, -7.3, num=30):\n    Cc = get_cunningham_corr_factor(d)\n    term_velocity = (d**2 * g * p * Cc) / (18 * e)\n    travel_time_at_1_5_m = 1 / term_velocity # seconds\n\n    d_um = d * 1e6\n    times[d_um] = travel_time_at_1_5_m\n\nsettling_df = pd.DataFrame(list(times.items()), columns=['Aerosol diameter (um)', 'Residence time in hours'])\n\n\n\n\ndf_breathing = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nmedian_df_breathing = df_breathing[df_breathing['point_type'] == 'Median_breathing']\n\ndf_pivot_breathing = df_breathing.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot_breathing.columns = ['_'.join(col).strip() for col in df_pivot_breathing.columns.values]\ndf_pivot_breathing = pd.merge(df_pivot_breathing, median_df_breathing[['point_group', 'diameter_um']], on='point_group')\n\ndf_speaking = pd.read_csv(\"data/speaking_2023_bagheri.csv\")\nmedian_df_speaking = df_speaking[df_speaking['point_type'] == 'Median_speaking']\n\ndf_pivot_speaking = df_speaking.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot_speaking.columns = ['_'.join(col).strip() for col in df_pivot_speaking.columns.values]\ndf_pivot_speaking = pd.merge(df_pivot_speaking, median_df_speaking[['point_group', 'diameter_um']], on='point_group')\n\n```\n:::\n\n\n::: {#3ffe0387 .cell execution_count=4}\n``` {.python .cell-code}\nfig, axs = plt.subplots(2, 1, figsize=(8, 5.8), height_ratios=[2, 2], dpi=600, sharex=True)\n\n\ntab_colors = sns.color_palette()\n\n\naxs[0].errorbar(df_pivot_breathing['diameter_um_Median_breathing'], df_pivot_breathing['density_Median_breathing'],\n                yerr=[df_pivot_breathing['density_Median_breathing'] - df_pivot_breathing['density_Lower_CI_breathing'], df_pivot_breathing['density_Upper_CI_breathing'] - df_pivot_breathing['density_Median_breathing']],\n                fmt='o', color=tab_colors[0], label='Median with CI', markersize=4)\naxs[0].text(0.48, 0.3, 'Breathing', transform=axs[0].transAxes, ha='left', va='bottom', fontsize=10, color=tab_colors[0])\n\n\naxs[0].errorbar(df_pivot_speaking['diameter_um_Median_speaking'], df_pivot_speaking['density_Median_speaking'],\n                yerr=[df_pivot_speaking['density_Median_speaking'] - df_pivot_speaking['density_Lower_CI_speaking'], df_pivot_speaking['density_Upper_CI_speaking'] - df_pivot_speaking['density_Median_speaking']],\n                fmt='o', color=tab_colors[1], label='Median with CI', markersize=4)\naxs[0].text(0.69, 0.75, 'Speaking', transform=axs[0].transAxes, ha='left', va='bottom', fontsize=10, color=tab_colors[1])\n\naxs[0].set_yscale('log')\naxs[0].set_xscale('log')\naxs[0].set_xlabel('Aerosol diameter (μm)', fontsize=9)\naxs[0].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.2f}'.format(x)))\naxs[0].tick_params(axis='x', which='major', labelbottom=True, labelsize=8)\naxs[0].tick_params(axis='y', which='major', labelsize=8)\naxs[0].set_ylabel(r'Particle concentration (log) / $\\mathregular{cm^{-3}}$', fontsize=9)\naxs[0].set_title(\"\") # Aerosol size distribution when breathing and speaking\", fontsize=10)\naxs[0].legend()\naxs[0].legend(loc='lower center', bbox_to_anchor=(0.5, -0.4), title=None, ncol=2, frameon=False, fontsize=10)\n\n\n\n\nsettling_df_sorted = settling_df.sort_values(by=\"Aerosol diameter (um)\")\nsns_colors = sns.color_palette()\nsns.lineplot(data=settling_df_sorted, x='Aerosol diameter (um)', y='Residence time in hours', ax=axs[1], color=sns_colors[4])\n\n#axs[1].set_xscale('log')\naxs[1].set_yscale('log')\naxs[1].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.2f}'.format(x)))\n\naxs[1].set_xlabel('Aerosol diameter (μm)', fontsize=9)\naxs[1].set_ylabel('Residence time', fontsize=9)\nimport matplotlib.ticker as ticker\n\n# Define the tick values and their corresponding labels\ntick_values = [1, 60, 3600, 86400]  # Values in seconds for 1 second, 1 minute, 1 hour, and 1 day\ntick_labels = ['1s', '1m', '1h', '24h']\n\n# Set the y-axis ticks and labels\naxs[1].set_yticks(tick_values)\naxs[1].set_yticklabels(tick_labels)\n\n\naxs[1].set_title(\"\") #Aerosol residence time in hours\", fontsize=10)\naxs[1].tick_params(axis='x', which='major', bottom=False, labelsize=8)\naxs[1].tick_params(axis='y', which='major', labelsize=8)\n\nfor ax in axs:\n    ax.tick_params(axis='both', which='minor', left=False, right=False, top=False, bottom=False)\n    ax.grid(True, which='major', color='gray', linewidth=0.2)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n\n\nplt.savefig(\"figures/aerosol_size_distribution.png\", dpi=600)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\nInstantiating the Stokes' law for small particles.\n\n::: {#93f2bb5c .cell execution_count=5}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load your data\ndf = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nmedian_df = df[df['point_type'] == 'Median_breathing']\n\ndf_pivot = df.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot.columns = ['_'.join(col).strip() for col in df_pivot.columns.values]\ndf_pivot = pd.merge(df_pivot, median_df[['point_group', 'diameter_um']], on='point_group')\n\n\nfig, axs = plt.subplots(2, 1, figsize=(6, 6), height_ratios=[2, 3], dpi=600, sharex=True)\n# insert hspace\nplt.subplots_adjust(hspace=0.5)\naxs[0].set_yscale('log')\naxs[0].set_xscale('log')\nprint(df_pivot.columns)\n\ntab_colors = sns.color_palette()\naxs[0].errorbar(df_pivot['diameter_um_Median_breathing'], df_pivot['density_Median_breathing'],\n                yerr=[df_pivot['density_Median_breathing'] - df_pivot['density_Lower_CI_breathing'], df_pivot['density_Upper_CI_breathing'] - df_pivot['density_Median_breathing']],\n                fmt='o', color=tab_colors[0], label='Median with CI')\n\n\n#\n## Smooth curve through the median points\n#sns.lineplot(data=median_df, x='diameter_um', y='density', ax=axs[0], color='red', label='Smoothed curve')\n#\n## Set log scale for better visualization\n#axs[0].set_yscale('log')\n#axs[0].set_xscale('log')\n#\n## Adding labels and legend\n#axs[0].set_xlabel('Diameter (um)')\n#axs[0].set_ylabel('Density')\n#axs[0].legend()\n#\nplt.show()\n#\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['point_group', 'density_Lower_CI_breathing', 'density_Median_breathing',\n       'density_Upper_CI_breathing', 'diameter_um_Lower_CI_breathing',\n       'diameter_um_Median_breathing', 'diameter_um_Upper_CI_breathing',\n       'diameter_um'],\n      dtype='object')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-2.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}