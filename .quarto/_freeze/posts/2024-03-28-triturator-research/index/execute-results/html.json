{
  "hash": "727843749d76119b932400b9d3c2aaa2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Triturator Analysis\nauthor: 'Simon Grimm '\ndate: '2024-03-28'\nformat:\n  html:\n    code-fold: true\nfilters:\n  - black-formatter\ncap-location: bottom\ndraft: true\ndraft-mode: gone\n---\n\n# Setup\n\n::: {#6de0889d .cell execution_count=1}\n``` {.python .cell-code}\n# Importing packages\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport datetime as dt\nimport ast\nimport random\nimport math\nimport csv\nimport gspread as gs\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\nfrom collections import defaultdict\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\n\n\n\ndef return_airline_trit_dict():\n    gc = gs.oauth()\n    sh = gc.open(\"Airlines_Triturators\")\n    worksheet = sh.get_worksheet(0)\n    df = pd.DataFrame(worksheet.get_all_records())\n    prettier_triturator = {\n        \"Swissport\": \"Swissport\\nTriturator\",\n        \"American Airlines\": \"American Airlines\\nTriturator\",\n        \"Unknown\": \"Unknown\",\n        \"No Triturator Used\": \"No Triturator used\"\n    }\n    df['Prettier Triturator'] = df['Triturator'].map(prettier_triturator).fillna(df['Triturator'])\n    # Convert to dictionary\n    airline_trit_dict = pd.Series(df['Prettier Triturator'].values,index=df['Airline']).to_dict()\n    return airline_trit_dict\n\ndef return_flights():\n    airline_trit_dict = return_airline_trit_dict()\n    unmatched_airlines = defaultdict(int)\n    with open(\"all_flights.tsv\") as infile:\n        lines = infile.readlines()\n        us_flights = []\n        lines = lines[1:]\n        for line in lines:\n            (\n                origin,\n                origin_code,\n                date,\n                terminal,\n                equipment,\n                flight,\n                airline,\n                nation,\n                state,\n                flight_time,\n            ) = line.split(\"\\t\")\n            airlines = ast.literal_eval(airline)\n            prime_airline = airlines[0]\n            prime_airline = prime_airline.strip()\n            if prime_airline in airline_trit_dict:\n                triturator_status = airline_trit_dict[prime_airline]\n            elif prime_airline == \"JetBlue\": # Sometimes it's JetBlue, sometimes it's JetBlue Airways\n                triturator_status = \"Swissport\\nTriturator\"\n            elif nation == \"Canada\":\n                triturator_status = \"Unknown\"\n            elif nation != \"United States\":\n                triturator_status = \"Swissport\\nTriturator\"\n                unmatched_airlines[prime_airline] += 1\n            else:\n                triturator_status = \"Unknown\"\n                unmatched_airlines[prime_airline] += 1\n            us_flights.append(\n                [\n                    origin,\n                    origin_code,\n                    date,\n                    terminal,\n                    equipment,\n                    flight,\n                    prime_airline,\n                    nation,\n                    state,\n                    flight_time,\n                    triturator_status,\n                ]\n            )\n\n        us_flights_df = pd.DataFrame(us_flights)\n\n        us_flights_df.columns = [\n            \"Origin\",\n            \"Origin Code\",\n            \"Date\",\n            \"Terminal\",\n            \"Equipment\",\n            \"Flight\",\n            \"Prime Airline\",\n            \"Nation\",\n            \"State\",\n            \"Flight Time\",\n            \"Triturator Status\",\n        ]\n        return us_flights_df\n\ndef origin_to_nation_dict():\n    df = return_flights()\n    df[\"Plotting Origin\"] = np.where(\n        df[\"Nation\"] == \"United States\",\n        df[\"State\"],\n        df[\"Nation\"],\n    )\n    nation_dict = df.set_index(\"Plotting Origin\")[\"Nation\"].to_dict()\n    return nation_dict\n\n\ndef time_to_float(time):\n    time = time.strip()\n    try:\n        time_object = dt.datetime.strptime(time, \"%H:%M:%S\")\n        hours = (\n            time_object.hour\n            + time_object.minute / 60\n            + time_object.second / 3600\n        )\n        return hours\n    except Exception as e:\n        print(f\"conversion of time {time} failed: {e}\")\n        return 0\n\ndef get_first_date_and_last_date():\n    df = return_flights()\n\n    first_date = df[\"Date\"].min()\n\n    last_date = df[\"Date\"].max()\n    last_date = pd.to_datetime(last_date, format=\"%B %d, %Y\")\n\n    last_date = last_date.strftime(\"%Y-%m-%d\")\n    return first_date, last_date\n\nus_flights_df = return_flights()\n```\n:::\n\n\n# Introduction\n\nIn Q1 we collected several pieces of information to better understand the composition of Project Runway triturator samples. One important piece was information on inbound flights to Boston, which included flight duration, airline, plane type, etc. This data was collated by a scraper created by Lenni, found [here](https://github.com/naobservatory/BOSTraffic/tree/master). A script that downloads the data from AWS can be found [here](https://github.com/naobservatory/simons-notebook/blob/main/posts/2024-03-28-triturator-research/get-all-flights.py).\n\nWe need to know where the waste on these flights ends up. We thus spent some time reaching out to a lot of different airlines and ground handling companies (see [here](https://docs.google.com/document/d/1U5U3M76xe2eWN7batlIJoXhh8_kDKVhfANBOs8bmkwk/edit) for call notes). Weâ€™ve got information on the triturator usage for most airlines (though we have more trust in some pieces of information than in others). Our current high level overview looks the following way:\n\n\n## Flights across Triturators\n\n::: {#2f4285c1 .cell execution_count=2}\n``` {.python .cell-code}\ndef create_airline_table():\n    gc = gs.oauth()\n    sh = gc.open(\"Airlines_Triturators\")\n    worksheet = sh.get_worksheet(0)\n    table = pd.DataFrame(worksheet.get_all_records())[[\"Airline\", \"Triturator\",\"Ground handling\", \"Source\",]]\n\n    df = us_flights_df\n    df[\"Flight Hours\"] = df[\"Flight Time\"].apply(time_to_float)\n    airline_hours = df.groupby(\"Prime Airline\")[\"Flight Hours\"].sum().to_dict()\n\n    table[\"Flight Hours\"] = table[\"Airline\"].map(airline_hours).fillna(0).astype(int)\n    table = table.sort_values(by=\"Flight Hours\", ascending=False)\n    return table\n\ntable = create_airline_table()\n\n\nMarkdown(tabulate(\n  table.values,\n  headers=[\"Airline\",\"Triturator\",\"Ground Handling\",\"Source\", \"Flight Hours\"],\n  showindex=False,\n))\n\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=2}\nAirline                    Triturator          Ground Handling     Source                                                Flight Hours\n-------------------------  ------------------  ------------------  --------------------------------------------------  --------------\nDelta Air Lines            Swissport           None                Email by Keith Serkiz (Swissport)                           130491\nJetBlue Airways            Swissport           None                Email by Keith Serkiz (Swissport)                           117113\nAmerican Airlines          American Airlines   Unknown             Email by Keith Serkiz (Swissport)                            62199\nUnited Airlines            American Airlines   Unknown             Email by Keith Serkiz (Swissport)                            35454\nAlaska Airlines            American Airlines   Unknown             Email by Austin Sumsion (Alaska Airlines)                    15907\nSpirit Airlines            Unknown             ATS                 Call with Michael McPherson (Dnata)                          14813\nCape Air                   No Triturator Used  No Triturator Used  Call with Cape Air representative                            13894\nSouthwest Airlines         Swissport           None                Email by Keith Serkiz (Swissport)                            12296\nAer Lingus                 Swissport           Swissport           Email by Michael Kisko (Swissport)                            9588\nEmirates                   Swissport           Dnata               Call with Michael McPherson (Dnata)                           8998\nLufthansa                  Swissport           Dnata               Call with Michael McPherson (Dnata)                           8894\nQatar Airways              Swissport           Swissport           Email by Michael Kisko (Swissport)                            8642\nBritish Airways            Unknown             Dnata               Call with Michael McPherson (Dnata), Call with IAG            7320\nTAP Air Portugal           Swissport           Swissport           Email by Michael Kisko (Swissport)                            6130\nKorean Air                 Swissport           Swissport           Email by Michael Kisko (Swissport)                            4676\nAir Canada                 Unknown             Unknown             No information                                                4558\nIcelandair                 American Airlines   Triangle            Email by Tom Knowles (VP at Triangle)                         4445\nITA Airways                Swissport           Swissport           Email by Michael Kisko (Swissport)                            4144\nIberia                     Swissport           Swissport           Email by Michael Kisko (Swissport)                            3664\nAir France                 American Airlines   Triangle            Email by Tom Knowles (VP at Triangle)                         3503\nTurkish Airlines           Swissport           Swissport           Email by Michael Kisko (Swissport)                            3498\nCathay Pacific             Swissport           Dnata               Call with Michael McPherson (Dnata)                           2977\nAvianca                    American Airlines   Triangle            Email by Tom Knowles (VP at Triangle)                         2429\nSAS Scandinavian Airlines  Swissport           Swissport           Email by Michael Kisko (Swissport)                            2243\nHawaiian Airlines          Swissport           Swissport           Email by Michael Kisko (Swissport)                            2137\nCopa Airlines              American Airlines   Triangle            Email by Tom Knowles (VP at Triangle)                         2007\nFly Play                   Swissport           Swissport           Email by Michael Kisko (Swissport)                            1739\nEl Al Israel Airlines      Swissport           Swissport           Email by Michael Kisko (Swissport)                            1575\nLATAM Airlines             Swissport           Swissport           Email by Michael Kisko (Swissport)                            1388\nKLM Royal Dutch Airlines   American Airlines   Triangle            Email by Tom Knowles (VP at Triangle)                         1257\nAllegiant Air              American Airlines   Triangle            Email by Tom Knowles (VP at Triangle)                          956\nHainan Airlines            Swissport           Swissport           Email by Michael Kisko (Swissport)                             799\nSun Country Airlines       American Airlines   Triangle            Email by Tom Knowles (VP at Triangle)                          573\nBermudAir                  Swissport           Swissport           Email by Michael Kisko (Swissport)                             459\nCondor                     Swissport           Swissport           Email by Michael Kisko (Swissport)                             291\nSwiss                      Swissport           Dnata               Call with Michael McPherson (Dnata)                            276\nPorter Airlines            Swissport           Swissport           Email by Michael Kisko (Swissport)                             250\nQatar Executive            Swissport           Swissport           Email by Michael Kisko (Swissport)                             102\nJapan Airlines             Swissport           Dnata               Call with Michael McPherson (Dnata)                            101\n:::\n:::\n\n\n::: {#8827aa8e .cell execution_count=3}\n``` {.python .cell-code}\ndef return_plotting_df():\n    df = us_flights_df\n    df = df.groupby(\"Triturator Status\").size().reset_index(name=\"Flights\")\n    df = df.sort_values(by=\"Flights\", ascending=False)\n    return df\n\ndef return_destination_trit():\n    df = return_plotting_df()\n    fig, ax = plt.subplots(figsize=(8, 3))\n    colors = {\"No Triturator used\": \"tab:orange\", \"Unknown\": \"tab:red\", \"Swissport\\nTriturator\": \"tab:green\", \"American Airlines\\nTriturator\": \"tab:blue\"}\n\n    df.plot(\n        kind=\"barh\",\n        x=\"Triturator Status\",\n        y=\"Flights\",\n        ax=ax,\n        legend=False,\n        color = [colors[i] for i in df[\"Triturator Status\"]]\n    )\n\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    plt.tick_params(axis=\"y\", which=\"both\", left=False, right=False)\n    plt.ylabel(\"\")\n    plt.xlabel(\"Total Flights\")\n    plt.title(\"Total Flights per Triturator and Airline\")\n    plt.tight_layout()\n    plt.show()\n\nreturn_destination_trit()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=757 height=278}\n:::\n:::\n\n\n## Airlines\n\n### Flights per Airline\n\n::: {#13fb4a13 .cell execution_count=4}\n``` {.python .cell-code}\ndef return_plotting_df():\n    df = us_flights_df\n    df = df.groupby([\"Prime Airline\", \"Triturator Status\"]).size().reset_index(name=\"Flights\")\n    df = df.pivot(\n        index=\"Prime Airline\", columns=\"Triturator Status\", values=\"Flights\"\n    )\n    df[\"Total\"] = df.sum(axis=1)\n    df = df.sort_values(by=\"Total\", ascending=False)\n    df = df.drop(\"Total\", axis=1)\n    return df\n\ndef total_flights_airline_trit_plot():\n    df = return_plotting_df()\n\n    df = df.head(50)\n    fig, ax = plt.subplots(figsize=(8, 7))\n    df.plot.barh(stacked=True, ax=ax, width=0.8)\n\n\n    # drop title of legend box\n    ax.legend().set_title(\"\")\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    plt.tick_params(axis=\"y\", which=\"both\", left=False, right=False)\n    plt.ylabel(\"\")\n    plt.xlabel(\"Total Flights\")\n    first_date, last_date = get_first_date_and_last_date()\n    plt.title(f\"Total Flights per Airline and Triturator (Top 50)\\n{first_date} - {last_date}\")\n\n    plt.tight_layout()\n    plt.show()\n\ntotal_flights_airline_trit_plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=757 height=663}\n:::\n:::\n\n\n### Flight Hours per Airline\n\n::: {#f07eb1da .cell execution_count=5}\n``` {.python .cell-code}\ndef return_plotting_df():\n    df = us_flights_df\n\n    df[\"Flight Hours\"] = df[\"Flight Time\"].apply(time_to_float)\n\n\n    df = (\n        df.groupby([\"Prime Airline\", \"Triturator Status\"])\n        .agg({\"Flight Hours\": \"sum\"})\n        .reset_index()\n    )\n\n    df = df.pivot(\n        index=\"Prime Airline\", columns=\"Triturator Status\", values=\"Flight Hours\"\n    )\n\n    df[\"Total\"] = df.sum(axis=1)\n    df = df.sort_values(by=\"Total\", ascending=False)\n    df = df.drop(\"Total\", axis=1)\n\n    return df\n\n\n\ndef total_flight_hours_airline_trit_plot():\n    df = return_plotting_df()\n    df = df.head(50)\n    fig, ax = plt.subplots(figsize=(8, 7))\n    df.plot.barh(stacked=True, ax=ax, width=0.8)\n    # drop title of legend box\n    ax.legend().set_title(\"\")\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    plt.tick_params(axis=\"y\", which=\"both\", left=False, right=False)\n    plt.ylabel(\"\")\n    plt.xlabel(\"Total Flight Hours\")\n    first_date, last_date = get_first_date_and_last_date()\n    plt.title(f\"Total Flight Hours per Airline and Triturator (Top 50)\\n{first_date} - {last_date}\")\n\n    plt.tight_layout()\n    plt.show()\n\n\ntotal_flight_hours_airline_trit_plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=757 height=663}\n:::\n:::\n\n\n## Airlines\n\n### Flights per Origin Location\n\n::: {#8a4269d7 .cell execution_count=6}\n``` {.python .cell-code}\ndef return_plotting_df():\n    df = us_flights_df\n\n    df[\"Flight Hours\"] = df[\"Flight Time\"].apply(time_to_float)\n\n    df[\"Plotting Origin\"] = np.where(\n        df[\"Nation\"] == \"United States\",\n        df[\"State\"],\n        df[\"Nation\"],\n    )\n    # group by origin and trit status and sum flight hours\n    df = df.groupby([\"Plotting Origin\", \"Triturator Status\"]).size().reset_index(name=\"Flights\")\n    df = df.pivot(\n        index=\"Plotting Origin\", columns=\"Triturator Status\", values=\"Flights\"\n    )\n    df[\"Total\"] = df.sum(axis=1)\n    df = df.sort_values(by=\"Total\", ascending=False)\n    df = df.drop(\"Total\", axis=1)\n\n    return df\n\n\ndef return_destination_trit_plot():\n    df = return_plotting_df()\n    nation_dict = origin_to_nation_dict()\n\n    df = df.head(50)\n    fig, ax = plt.subplots(figsize=(8, 7))\n    df.plot.barh(stacked=True, ax=ax, width=0.8)\n\n\n    for i, label in enumerate(ax.get_yticklabels()):\n        label.set_size(9)\n        origin = label.get_text()\n        if nation_dict[origin] != \"United States\":\n            label.set_size(9)\n            label.set_weight(\"bold\")\n    ax.get_legend().set_title(\"\")\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    plt.tick_params(axis=\"y\", which=\"both\", left=False, right=False)\n    plt.ylabel(\"\")\n    plt.xlabel(\"Total Flights\")\n    first_date, last_date = get_first_date_and_last_date()\n    plt.title(f\"Total Flights per Country/State and Triturator (Top 50)\\n{first_date} - {last_date}\")\n\n    plt.tight_layout()\n    plt.show()\n\nreturn_destination_trit_plot()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=758 height=663}\n:::\n:::\n\n\n### Flight Hours per Origin Location\n\n::: {#78816727 .cell execution_count=7}\n``` {.python .cell-code}\ndef return_plotting_df():\n    df = us_flights_df\n\n    df[\"Flight Hours\"] = df[\"Flight Time\"].apply(time_to_float)\n\n    df[\"Plotting Origin\"] = np.where(\n        df[\"Nation\"] == \"United States\",\n        df[\"State\"],\n        df[\"Nation\"],\n    )\n\n    df = (\n        df.groupby([\"Plotting Origin\", \"Triturator Status\"])\n        .agg({\"Flight Hours\": \"sum\"})\n        .reset_index()\n    )\n\n    df = df.pivot(\n        index=\"Plotting Origin\",\n        columns=\"Triturator Status\",\n        values=\"Flight Hours\",\n    )\n\n    df[\"Total\"] = df.sum(axis=1)\n    df = df.sort_values(by=\"Total\", ascending=False)\n    df = df.drop(\"Total\", axis=1)\n\n    return df\n\ndef return_destination_trit_plot():\n    df = return_plotting_df()\n    nation_dict = origin_to_nation_dict()\n\n    df = df.head(50)\n    fig, ax = plt.subplots(figsize=(8, 7))\n    df.plot.barh(stacked=True, ax=ax, width=0.8, color = sns.color_palette(\"tab10\"))\n\n    for i, label in enumerate(ax.get_yticklabels()):\n        label.set_size(9)\n        origin = label.get_text()\n        if nation_dict[origin] != \"United States\":\n            label.set_weight(\"bold\")\n\n\n\n    ax.get_legend().set_title(\"\")\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    plt.tick_params(axis=\"y\", which=\"both\", left=False, right=False)\n    plt.ylabel(\"\")\n    plt.xlabel(\"Total Flight Hours\")\n    first_date, last_date = get_first_date_and_last_date()\n    plt.title(f\"Total Flight Hours per Country/State and Triturator (Top 50)\\n{first_date} - {last_date}\")\n\n    plt.tight_layout()\n    plt.show()\n\n\nreturn_destination_trit_plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=758 height=663}\n:::\n:::\n\n\n# Remaining airlines we are unsure about\n\n::: {#704307d1 .cell execution_count=8}\n``` {.python .cell-code}\ndef return_plotting_df():\n    df = us_flights_df\n\n    df[\"Flight Hours\"] = df[\"Flight Time\"].apply(time_to_float)\n    df = df[df[\"Triturator Status\"] == \"Unknown\"]\n\n    df = (\n        df.groupby([\"Prime Airline\", \"Triturator Status\"])\n        .agg({\"Flight Hours\": \"sum\"})\n        .reset_index()\n\n    )\n    df = df[df[\"Flight Hours\"] > 1000]\n\n    df = df.pivot(\n        index=\"Prime Airline\", columns=\"Triturator Status\", values=\"Flight Hours\"\n    )\n\n    df[\"Total\"] = df.sum(axis=1)\n    df = df.sort_values(by=\"Total\", ascending=False)\n    df = df.drop(\"Total\", axis=1)\n\n    return df\n\n\ndef return_destination_trit_plot():\n    df = return_plotting_df()\n\n\n    df = df.head(50)\n    fig, ax = plt.subplots(figsize=(8, 3))\n    df.plot.barh(stacked=True, ax=ax, width=0.8)\n\n    ax.legend().set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    plt.tick_params(axis=\"y\", which=\"both\", left=False, right=False)\n    plt.ylabel(\"\")\n    plt.xlabel(\"Total Flight Hours\")\n    first_date, last_date = get_first_date_and_last_date()\n    plt.title(f\"Airlines where we do not have a confident triturator assignment (>1000 flight hours)\\n{first_date} - {last_date}\")\n\n    plt.tight_layout()\n    plt.show()\n\ndef start():\n    return_destination_trit_plot()\n\nif __name__ == \"__main__\":\n    start()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=807 height=279}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}