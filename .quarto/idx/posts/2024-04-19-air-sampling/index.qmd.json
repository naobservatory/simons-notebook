{"title":"Air sampling figure (size distribution)","markdown":{"yaml":{"title":"Air sampling figure (size distribution)","author":"Simon Grimm","date":"2024-04-19","format":{"html":{"code-fold":true,"code-tools":true,"code-link":true,"df-print":"paged"}},"editor":"visual","toc":true,"jupyter":"venv"},"headingText":"Define the tick values and their corresponding labels","containsRefs":false,"markdown":"\n\n```{python}\n#| label: load-packages\n#| include: false\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom collections import defaultdict\nimport random\nimport math\nfrom scipy.stats import gmean\nimport matplotlib.ticker as ticker\nfrom scipy.stats import linregress\nimport argparse\nfrom typing import List\n\n\n```\n\n```{python}\ndef get_cunningham_corr_factor(diameter):\n    λ = 6.4e-8\n    d = diameter\n    A1 = 1.257\n    A2 = 0.400\n    A3 = 0.55\n    Cc = 1 + ((2*λ)/d) * ( A1 + A2*np.exp((-A3*d)/λ) )\n    return Cc\n\ng = 9.81 # m/s^2, G\np = 997 # kg/m^3, density of water (aerosol)\ne = 1.825e-5 # dynamic viscosity of air\n\ntimes = defaultdict(int)\nfor d in np.logspace(-3, -8, num=30):\n    print(d)\n    Cc = get_cunningham_corr_factor(d)\n    term_velocity = (d**2 * g * p * Cc) / (18 * e)\n    time_at_1_5_m = 1 / term_velocity\n    hours = time_at_1_5_m / 3600\n    d_um = d * 1e6\n    times[d_um] = hours\n\nsettling_df = pd.DataFrame(list(times.items()), columns=['Aerosol diameter (um)', 'Residence time in hours'])\n```\n\n\n```{python}\nspeaking_df = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nbreathing_df = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\n\n\ndef get_cunningham_corr_factor(diameter):\n    λ = 6.4e-8\n    d = diameter\n    A1 = 1.257\n    A2 = 0.400\n    A3 = 0.55\n    Cc = 1 + ((2*λ)/d) * ( A1 + A2*np.exp((-A3*d)/λ) )\n    return Cc\n\ng = 9.81 # m/s^2, G\np = 997 # kg/m^3, density of water (aerosol)\ne = 1.825e-5 # dynamic viscosity of air\n\ntimes = defaultdict(int)\nfor d in np.logspace(-3.4, -7.3, num=30):\n    Cc = get_cunningham_corr_factor(d)\n    term_velocity = (d**2 * g * p * Cc) / (18 * e)\n    travel_time_at_1_5_m = 1 / term_velocity # seconds\n\n    d_um = d * 1e6\n    times[d_um] = travel_time_at_1_5_m\n\nsettling_df = pd.DataFrame(list(times.items()), columns=['Aerosol diameter (um)', 'Residence time in hours'])\n\n\n\n\ndf_breathing = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nmedian_df_breathing = df_breathing[df_breathing['point_type'] == 'Median_breathing']\n\ndf_pivot_breathing = df_breathing.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot_breathing.columns = ['_'.join(col).strip() for col in df_pivot_breathing.columns.values]\ndf_pivot_breathing = pd.merge(df_pivot_breathing, median_df_breathing[['point_group', 'diameter_um']], on='point_group')\n\ndf_speaking = pd.read_csv(\"data/speaking_2023_bagheri.csv\")\nmedian_df_speaking = df_speaking[df_speaking['point_type'] == 'Median_speaking']\n\ndf_pivot_speaking = df_speaking.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot_speaking.columns = ['_'.join(col).strip() for col in df_pivot_speaking.columns.values]\ndf_pivot_speaking = pd.merge(df_pivot_speaking, median_df_speaking[['point_group', 'diameter_um']], on='point_group')\n\n\n\n```\n\n\n```{python}\nfig, axs = plt.subplots(2, 1, figsize=(8, 5.8), height_ratios=[2, 2], dpi=600, sharex=True)\n\n\ntab_colors = sns.color_palette()\n\n\naxs[0].errorbar(df_pivot_breathing['diameter_um_Median_breathing'], df_pivot_breathing['density_Median_breathing'],\n                yerr=[df_pivot_breathing['density_Median_breathing'] - df_pivot_breathing['density_Lower_CI_breathing'], df_pivot_breathing['density_Upper_CI_breathing'] - df_pivot_breathing['density_Median_breathing']],\n                fmt='o', color=tab_colors[0], label='Median with CI', markersize=4)\naxs[0].text(0.48, 0.3, 'Breathing', transform=axs[0].transAxes, ha='left', va='bottom', fontsize=10, color=tab_colors[0])\n\n\naxs[0].errorbar(df_pivot_speaking['diameter_um_Median_speaking'], df_pivot_speaking['density_Median_speaking'],\n                yerr=[df_pivot_speaking['density_Median_speaking'] - df_pivot_speaking['density_Lower_CI_speaking'], df_pivot_speaking['density_Upper_CI_speaking'] - df_pivot_speaking['density_Median_speaking']],\n                fmt='o', color=tab_colors[1], label='Median with CI', markersize=4)\naxs[0].text(0.69, 0.75, 'Speaking', transform=axs[0].transAxes, ha='left', va='bottom', fontsize=10, color=tab_colors[1])\n\naxs[0].set_yscale('log')\naxs[0].set_xscale('log')\naxs[0].set_xlabel('Aerosol diameter (μm)', fontsize=9)\naxs[0].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.2f}'.format(x)))\naxs[0].tick_params(axis='x', which='major', labelbottom=True, labelsize=8)\naxs[0].tick_params(axis='y', which='major', labelsize=8)\naxs[0].set_ylabel(r'Particle concentration (log) / $\\mathregular{cm^{-3}}$', fontsize=9)\naxs[0].set_title(\"\") # Aerosol size distribution when breathing and speaking\", fontsize=10)\naxs[0].legend()\naxs[0].legend(loc='lower center', bbox_to_anchor=(0.5, -0.4), title=None, ncol=2, frameon=False, fontsize=10)\n\n\n\n\nsettling_df_sorted = settling_df.sort_values(by=\"Aerosol diameter (um)\")\nsns_colors = sns.color_palette()\nsns.lineplot(data=settling_df_sorted, x='Aerosol diameter (um)', y='Residence time in hours', ax=axs[1], color=sns_colors[4])\n\n#axs[1].set_xscale('log')\naxs[1].set_yscale('log')\naxs[1].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.2f}'.format(x)))\n\naxs[1].set_xlabel('Aerosol diameter (μm)', fontsize=9)\naxs[1].set_ylabel('Residence time', fontsize=9)\nimport matplotlib.ticker as ticker\n\ntick_values = [1, 60, 3600, 86400]  # Values in seconds for 1 second, 1 minute, 1 hour, and 1 day\ntick_labels = ['1s', '1m', '1h', '24h']\n\n# Set the y-axis ticks and labels\naxs[1].set_yticks(tick_values)\naxs[1].set_yticklabels(tick_labels)\n\n\naxs[1].set_title(\"\") #Aerosol residence time in hours\", fontsize=10)\naxs[1].tick_params(axis='x', which='major', bottom=False, labelsize=8)\naxs[1].tick_params(axis='y', which='major', labelsize=8)\n\nfor ax in axs:\n    ax.tick_params(axis='both', which='minor', left=False, right=False, top=False, bottom=False)\n    ax.grid(True, which='major', color='gray', linewidth=0.2)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n\n\nplt.savefig(\"figures/aerosol_size_distribution.png\", dpi=600)\n```\n\nInstantiating the Stokes' law for small particles.\n\n```{python}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load your data\ndf = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nmedian_df = df[df['point_type'] == 'Median_breathing']\n\ndf_pivot = df.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot.columns = ['_'.join(col).strip() for col in df_pivot.columns.values]\ndf_pivot = pd.merge(df_pivot, median_df[['point_group', 'diameter_um']], on='point_group')\n\n\nfig, axs = plt.subplots(2, 1, figsize=(6, 6), height_ratios=[2, 3], dpi=600, sharex=True)\n# insert hspace\nplt.subplots_adjust(hspace=0.5)\naxs[0].set_yscale('log')\naxs[0].set_xscale('log')\nprint(df_pivot.columns)\n\ntab_colors = sns.color_palette()\naxs[0].errorbar(df_pivot['diameter_um_Median_breathing'], df_pivot['density_Median_breathing'],\n                yerr=[df_pivot['density_Median_breathing'] - df_pivot['density_Lower_CI_breathing'], df_pivot['density_Upper_CI_breathing'] - df_pivot['density_Median_breathing']],\n                fmt='o', color=tab_colors[0], label='Median with CI')\n\n\n#\n## Smooth curve through the median points\n#sns.lineplot(data=median_df, x='diameter_um', y='density', ax=axs[0], color='red', label='Smoothed curve')\n#\n## Set log scale for better visualization\n#axs[0].set_yscale('log')\n#axs[0].set_xscale('log')\n#\n## Adding labels and legend\n#axs[0].set_xlabel('Diameter (um)')\n#axs[0].set_ylabel('Density')\n#axs[0].legend()\n#\nplt.show()\n#\n```","srcMarkdownNoYaml":"\n\n```{python}\n#| label: load-packages\n#| include: false\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom collections import defaultdict\nimport random\nimport math\nfrom scipy.stats import gmean\nimport matplotlib.ticker as ticker\nfrom scipy.stats import linregress\nimport argparse\nfrom typing import List\n\n\n```\n\n```{python}\ndef get_cunningham_corr_factor(diameter):\n    λ = 6.4e-8\n    d = diameter\n    A1 = 1.257\n    A2 = 0.400\n    A3 = 0.55\n    Cc = 1 + ((2*λ)/d) * ( A1 + A2*np.exp((-A3*d)/λ) )\n    return Cc\n\ng = 9.81 # m/s^2, G\np = 997 # kg/m^3, density of water (aerosol)\ne = 1.825e-5 # dynamic viscosity of air\n\ntimes = defaultdict(int)\nfor d in np.logspace(-3, -8, num=30):\n    print(d)\n    Cc = get_cunningham_corr_factor(d)\n    term_velocity = (d**2 * g * p * Cc) / (18 * e)\n    time_at_1_5_m = 1 / term_velocity\n    hours = time_at_1_5_m / 3600\n    d_um = d * 1e6\n    times[d_um] = hours\n\nsettling_df = pd.DataFrame(list(times.items()), columns=['Aerosol diameter (um)', 'Residence time in hours'])\n```\n\n\n```{python}\nspeaking_df = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nbreathing_df = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\n\n\ndef get_cunningham_corr_factor(diameter):\n    λ = 6.4e-8\n    d = diameter\n    A1 = 1.257\n    A2 = 0.400\n    A3 = 0.55\n    Cc = 1 + ((2*λ)/d) * ( A1 + A2*np.exp((-A3*d)/λ) )\n    return Cc\n\ng = 9.81 # m/s^2, G\np = 997 # kg/m^3, density of water (aerosol)\ne = 1.825e-5 # dynamic viscosity of air\n\ntimes = defaultdict(int)\nfor d in np.logspace(-3.4, -7.3, num=30):\n    Cc = get_cunningham_corr_factor(d)\n    term_velocity = (d**2 * g * p * Cc) / (18 * e)\n    travel_time_at_1_5_m = 1 / term_velocity # seconds\n\n    d_um = d * 1e6\n    times[d_um] = travel_time_at_1_5_m\n\nsettling_df = pd.DataFrame(list(times.items()), columns=['Aerosol diameter (um)', 'Residence time in hours'])\n\n\n\n\ndf_breathing = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nmedian_df_breathing = df_breathing[df_breathing['point_type'] == 'Median_breathing']\n\ndf_pivot_breathing = df_breathing.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot_breathing.columns = ['_'.join(col).strip() for col in df_pivot_breathing.columns.values]\ndf_pivot_breathing = pd.merge(df_pivot_breathing, median_df_breathing[['point_group', 'diameter_um']], on='point_group')\n\ndf_speaking = pd.read_csv(\"data/speaking_2023_bagheri.csv\")\nmedian_df_speaking = df_speaking[df_speaking['point_type'] == 'Median_speaking']\n\ndf_pivot_speaking = df_speaking.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot_speaking.columns = ['_'.join(col).strip() for col in df_pivot_speaking.columns.values]\ndf_pivot_speaking = pd.merge(df_pivot_speaking, median_df_speaking[['point_group', 'diameter_um']], on='point_group')\n\n\n\n```\n\n\n```{python}\nfig, axs = plt.subplots(2, 1, figsize=(8, 5.8), height_ratios=[2, 2], dpi=600, sharex=True)\n\n\ntab_colors = sns.color_palette()\n\n\naxs[0].errorbar(df_pivot_breathing['diameter_um_Median_breathing'], df_pivot_breathing['density_Median_breathing'],\n                yerr=[df_pivot_breathing['density_Median_breathing'] - df_pivot_breathing['density_Lower_CI_breathing'], df_pivot_breathing['density_Upper_CI_breathing'] - df_pivot_breathing['density_Median_breathing']],\n                fmt='o', color=tab_colors[0], label='Median with CI', markersize=4)\naxs[0].text(0.48, 0.3, 'Breathing', transform=axs[0].transAxes, ha='left', va='bottom', fontsize=10, color=tab_colors[0])\n\n\naxs[0].errorbar(df_pivot_speaking['diameter_um_Median_speaking'], df_pivot_speaking['density_Median_speaking'],\n                yerr=[df_pivot_speaking['density_Median_speaking'] - df_pivot_speaking['density_Lower_CI_speaking'], df_pivot_speaking['density_Upper_CI_speaking'] - df_pivot_speaking['density_Median_speaking']],\n                fmt='o', color=tab_colors[1], label='Median with CI', markersize=4)\naxs[0].text(0.69, 0.75, 'Speaking', transform=axs[0].transAxes, ha='left', va='bottom', fontsize=10, color=tab_colors[1])\n\naxs[0].set_yscale('log')\naxs[0].set_xscale('log')\naxs[0].set_xlabel('Aerosol diameter (μm)', fontsize=9)\naxs[0].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.2f}'.format(x)))\naxs[0].tick_params(axis='x', which='major', labelbottom=True, labelsize=8)\naxs[0].tick_params(axis='y', which='major', labelsize=8)\naxs[0].set_ylabel(r'Particle concentration (log) / $\\mathregular{cm^{-3}}$', fontsize=9)\naxs[0].set_title(\"\") # Aerosol size distribution when breathing and speaking\", fontsize=10)\naxs[0].legend()\naxs[0].legend(loc='lower center', bbox_to_anchor=(0.5, -0.4), title=None, ncol=2, frameon=False, fontsize=10)\n\n\n\n\nsettling_df_sorted = settling_df.sort_values(by=\"Aerosol diameter (um)\")\nsns_colors = sns.color_palette()\nsns.lineplot(data=settling_df_sorted, x='Aerosol diameter (um)', y='Residence time in hours', ax=axs[1], color=sns_colors[4])\n\n#axs[1].set_xscale('log')\naxs[1].set_yscale('log')\naxs[1].xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.2f}'.format(x)))\n\naxs[1].set_xlabel('Aerosol diameter (μm)', fontsize=9)\naxs[1].set_ylabel('Residence time', fontsize=9)\nimport matplotlib.ticker as ticker\n\n# Define the tick values and their corresponding labels\ntick_values = [1, 60, 3600, 86400]  # Values in seconds for 1 second, 1 minute, 1 hour, and 1 day\ntick_labels = ['1s', '1m', '1h', '24h']\n\n# Set the y-axis ticks and labels\naxs[1].set_yticks(tick_values)\naxs[1].set_yticklabels(tick_labels)\n\n\naxs[1].set_title(\"\") #Aerosol residence time in hours\", fontsize=10)\naxs[1].tick_params(axis='x', which='major', bottom=False, labelsize=8)\naxs[1].tick_params(axis='y', which='major', labelsize=8)\n\nfor ax in axs:\n    ax.tick_params(axis='both', which='minor', left=False, right=False, top=False, bottom=False)\n    ax.grid(True, which='major', color='gray', linewidth=0.2)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n\n\nplt.savefig(\"figures/aerosol_size_distribution.png\", dpi=600)\n```\n\nInstantiating the Stokes' law for small particles.\n\n```{python}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Load your data\ndf = pd.read_csv(\"data/breathing_2023_bagheri.csv\")\nmedian_df = df[df['point_type'] == 'Median_breathing']\n\ndf_pivot = df.pivot(index='point_group', columns='point_type', values=['density', 'diameter_um'])\ndf_pivot.columns = ['_'.join(col).strip() for col in df_pivot.columns.values]\ndf_pivot = pd.merge(df_pivot, median_df[['point_group', 'diameter_um']], on='point_group')\n\n\nfig, axs = plt.subplots(2, 1, figsize=(6, 6), height_ratios=[2, 3], dpi=600, sharex=True)\n# insert hspace\nplt.subplots_adjust(hspace=0.5)\naxs[0].set_yscale('log')\naxs[0].set_xscale('log')\nprint(df_pivot.columns)\n\ntab_colors = sns.color_palette()\naxs[0].errorbar(df_pivot['diameter_um_Median_breathing'], df_pivot['density_Median_breathing'],\n                yerr=[df_pivot['density_Median_breathing'] - df_pivot['density_Lower_CI_breathing'], df_pivot['density_Upper_CI_breathing'] - df_pivot['density_Median_breathing']],\n                fmt='o', color=tab_colors[0], label='Median with CI')\n\n\n#\n## Smooth curve through the median points\n#sns.lineplot(data=median_df, x='diameter_um', y='density', ax=axs[0], color='red', label='Smoothed curve')\n#\n## Set log scale for better visualization\n#axs[0].set_yscale('log')\n#axs[0].set_xscale('log')\n#\n## Adding labels and legend\n#axs[0].set_xlabel('Diameter (um)')\n#axs[0].set_ylabel('Density')\n#axs[0].legend()\n#\nplt.show()\n#\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","title":"Air sampling figure (size distribution)","author":"Simon Grimm","date":"2024-04-19","editor":"visual","jupyter":"venv"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}