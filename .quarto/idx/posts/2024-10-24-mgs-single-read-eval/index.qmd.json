{"title":"Checking if single-read version of mgs-workflow works","markdown":{"yaml":{"title":"Checking if single-read version of mgs-workflow works","author":"Simon Grimm","date":"2024-10-23","format":{"html":{"code-fold":true,"code-tools":true,"code-link":true,"df-print":"paged","toc":true,"toc-depth":2,"fig-format":"svg","crossref":{"fig-title":"Figure","fig-prefix":"Figure","chapters":true}}},"jupyter":"venv","title-block-banner":"black"},"headingText":"Assessing basic stats for both raw and cleaned reads","containsRefs":false,"markdown":"\n\nI'm adapting mgs-workflow to take in single-read data. Here I'm checking if i) the output of the single-read version looks as expected, and if ii) the output of the paired-end version is the same as the original version.\n\nThe single-end dataset simply consists of the forward reads of our usual test dataset. Additionally, I work with the full test dataset, run on the `single-read-raw` pipeline with read_type set to `paired_end`, and the full output of running the usual test dataset with the `dev` branch of `mgs-workflow`.\n```{python}\n#| label: load-packages\n#| include: false\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n\n```{python}\n#| label: data-paths\n\nsingle_read_dir = \"mgs-results/test_single_read\"\npaired_read_dir = \"mgs-results/test_paired_end\"\ntest_dir = \"mgs-results/test\"\nfull_test_dir = \"mgs-results/test-full\"\n\nse_output_dir = os.path.join(single_read_dir, \"output\")\npe_output_dir = os.path.join(paired_read_dir, \"output\")\ntest_output_dir = os.path.join(test_dir, \"output\")\nfull_test_output_dir = os.path.join(full_test_dir, \"output\")\n\nse_results_dir = os.path.join(se_output_dir, \"results\")\npe_results_dir = os.path.join(pe_output_dir, \"results\")\ntest_results_dir = os.path.join(test_output_dir, \"results\")\nfull_test_results_dir = os.path.join(full_test_output_dir, \"results\")\n\nse_qc_dir = os.path.join(se_results_dir, \"qc\")\npe_qc_dir = os.path.join(pe_results_dir, \"qc\")\ntest_qc_dir = os.path.join(test_results_dir, \"qc\")\nfull_test_qc_dir = os.path.join(full_test_results_dir, \"qc\")\n\nse_basic_stats_path = os.path.join(se_qc_dir, \"qc_basic_stats.tsv.gz\")\nse_adapter_stats_path = os.path.join(se_qc_dir, \"qc_adapter_stats.tsv.gz\")\nse_quality_base_stats_path = os.path.join(se_qc_dir, \"qc_quality_base_stats.tsv.gz\")\nse_quality_seq_stats_path = os.path.join(se_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n\n\n\npe_basic_stats_path = os.path.join(pe_qc_dir, \"qc_basic_stats.tsv.gz\")\npe_adapter_stats_path = os.path.join(pe_qc_dir, \"qc_adapter_stats.tsv.gz\")\npe_quality_base_stats_path = os.path.join(pe_qc_dir, \"qc_quality_base_stats.tsv.gz\")\npe_quality_seq_stats_path = os.path.join(pe_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n\n\ntest_basic_stats_path = os.path.join(test_qc_dir, \"qc_basic_stats.tsv.gz\")\ntest_adapter_stats_path = os.path.join(test_qc_dir, \"qc_adapter_stats.tsv.gz\")\ntest_quality_base_stats_path = os.path.join(test_qc_dir, \"qc_quality_base_stats.tsv.gz\")\ntest_quality_seq_stats_path = os.path.join(test_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n\nfull_test_basic_stats_path = os.path.join(full_test_qc_dir, \"qc_basic_stats.tsv.gz\")\nfull_test_adapter_stats_path = os.path.join(full_test_qc_dir, \"qc_adapter_stats.tsv.gz\")\nfull_test_quality_base_stats_path = os.path.join(full_test_qc_dir, \"qc_quality_base_stats.tsv.gz\")\nfull_test_quality_seq_stats_path = os.path.join(full_test_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n```\n\n\nFirst, we can check if the paired-end version of `single-read-raw` is identical to the original paired-end version. It is.\n\n```{python}\n#| label: load-basic-stats\nse_basic_stats = pd.read_csv(se_basic_stats_path, sep='\\t')\npe_basic_stats = pd.read_csv(pe_basic_stats_path, sep='\\t')\ntest_basic_stats = pd.read_csv(test_basic_stats_path, sep='\\t')\nfull_test_basic_stats = pd.read_csv(full_test_basic_stats_path, sep='\\t')\n```\n\n```{python}\n#| label: check-equivalence-of-paired-read-data\n#| echo: true\n#| code-fold: false\n\npe_basic_stats.equals(full_test_basic_stats)\n\n```\n\n\nNow, let's compare the basic stats of the single-read version to the paired-end version. What we see in @tbl-compare-base-pairs is that the the paired-end cleaned samples loses more base pairs than the single-read cleaned samples during cleaning. This is partly explained by the loss of substantially more reads in the paired-end version, as shown in @tbl-compare-read-pairs.\n\nMy current hypothesis is that the reverse reads are very low quality, where FASTP drops them, and thus also drops the forward reads.\n\n```{python}\n#| label: tbl-compare-base-pairs\n#| tbl-cap: Comparison of n_bases_approx between single-read and paired-end versions\n\n\nse_basic_stats[\"sample\"] = se_basic_stats[\"sample\"].str.replace(\"230926EsvD23\", \"230926Esv_D23\")\n\n\n# print(pe_basic_stats)\n\ncombined_df = se_basic_stats[[\"sample\", \"n_bases_approx\", \"stage\", \"n_read_pairs\"]].merge(\n    pe_basic_stats[[\"sample\", \"n_bases_approx\", \"stage\", \"n_read_pairs\"]],\n    on=[\"sample\", \"stage\"],\n    suffixes=[\"_single\", \"_paired\"]\n)\n\ncombined_df[\"ratio_bases\"] = round((combined_df[\"n_bases_approx_paired\"] / combined_df[\"n_bases_approx_single\"]) , 2)\ncombined_df[\"ratio_read_pairs\"] = round(combined_df[\"n_read_pairs_paired\"] / combined_df[\"n_read_pairs_single\"], 2)\n\n# Order columns\ncombined_df_base_pairs = combined_df[[\"sample\", \"stage\", \"n_bases_approx_single\", \"n_bases_approx_paired\", \"ratio_bases\"]]\n# Display the result\ncombined_df_base_pairs\n\n```\n\n\n```{python}\n#| label: tbl-compare-read-pairs\n#| tbl-cap: Comparison of n_read_pairs between single-read and paired-end versions\n\ncombined_df_read_pairs = combined_df[[\"sample\", \"stage\", \"n_read_pairs_single\", \"n_read_pairs_paired\", \"ratio_read_pairs\"]]\n\n\ncombined_df_read_pairs\n```\n\n\n\n# Comparing output of adapter stats\n\n```{python}\n#| label: load-adapter-stats\n#| echo: false\ntest_adapter_stats = pd.read_csv(test_adapter_stats_path, sep='\\t')\nse_adapter_stats = pd.read_csv(se_adapter_stats_path, sep='\\t')\npe_adapter_stats = pd.read_csv(pe_adapter_stats_path, sep='\\t')\nfull_test_adapter_stats = pd.read_csv(full_test_adapter_stats_path, sep='\\t')\n\n```\n\nAgain, the paired-end output of `single-read-raw` is identical to the original paired-end output of `qc_adapter_stats.tsv`.\n\n```{python}\n#| label: check-equivalence-of-adapter-stats\n#| echo: true\n#| code-fold: false\npe_adapter_stats.equals(full_test_adapter_stats)\n```\n\nComparing adapter contamination, the raw_concat percentages are equivalent (though the paired-end version sees more of a step-wise curve).\n\n```{python}\n#| label: fig-adapter-stats-comparison\n#| echo: false\n\nfig, axs = plt.subplots(2, 1, dpi=300, figsize=(10, 8))\nsns.lineplot(data=se_adapter_stats, x='position', y='pc_adapters', hue='stage', ax=axs[0],units=\"sample\", estimator=None, legend=True)\nsns.lineplot(data=pe_adapter_stats, x='position', y='pc_adapters', hue='stage', style=\"read_pair\", ax=axs[1],units=\"sample\", estimator=None, legend=True)\n\n# Set common properties for both subplots\nfor ax in axs:\n    ax.set_xlabel('Position')\n    ax.set_ylabel('% Adapters')\n    ax.grid(True, linestyle='--', alpha=0.7)\n\n# Set titles for each subplot\naxs[0].set_title('Single-End Adapter Stats')\naxs[1].set_title('Paired-End Adapter Stats')\n# Remove top and right spines for both subplots\nfor ax in axs:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n\n# Add a main title to the figure\n\n\nfig.tight_layout()\n```\n\n# Comparing output of quality base stats\n\n```{python}\n#| label: load-quality-base-stats\n#| echo: false\ntest_quality_base_stats = pd.read_csv(test_quality_base_stats_path, sep='\\t')\nse_quality_base_stats = pd.read_csv(se_quality_base_stats_path, sep='\\t')\npe_quality_base_stats = pd.read_csv(pe_quality_base_stats_path, sep='\\t')\nfull_test_quality_base_stats = pd.read_csv(full_test_quality_base_stats_path, sep='\\t')\n```\n\nAgain, the paired-end output of `single-read-raw` is identical to the original paired-end output of `qc_quality_base_stats.tsv`.\n\n```{python}\n#| label: equivalence-of-quality-base-stats\n#| echo: true\n#| code-fold: false\n#|\npe_quality_base_stats.equals(full_test_quality_base_stats)\n```\n\nAs expected, the single-read version looks very similar to the first read pair of the paired-end version.\n\n```{python}\n#| label: fig-quality-base-stats-comparison\n#| echo: false\nfig, axs = plt.subplots(2, 1, dpi=300, figsize=(10, 8))\n\nsns.lineplot(data=se_quality_base_stats, x='position', y='mean_phred_score', hue='stage', style=\"read_pair\", units=\"sample\", ax=axs[0],estimator=None, legend=True)\n\nsns.lineplot(data=pe_quality_base_stats, x='position', y='mean_phred_score', hue='stage', style=\"read_pair\", units=\"sample\", ax=axs[1],estimator=None, legend=True)\n\nfor ax in axs:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\nplt.subplots_adjust(hspace=0.3)\n\n\naxs[0].set_title('Single-End Quality Base Stats')\naxs[1].set_title('Paired-End Quality Base Stats')\n\n```\n\n\n# Comparing output of quality sequence stats\n\n```{python}\n#| label: load-quality-sequence-stats\n#| echo: false\ntest_quality_seq_stats = pd.read_csv(test_quality_seq_stats_path, sep='\\t')\nse_quality_seq_stats = pd.read_csv(se_quality_seq_stats_path, sep='\\t')\npe_quality_seq_stats = pd.read_csv(pe_quality_seq_stats_path, sep='\\t')\nfull_test_quality_seq_stats = pd.read_csv(full_test_quality_seq_stats_path, sep='\\t')\n```\n\nAgain, the paired-end output of `single-read-raw` is identical to `qc_quality_sequence_stats.tsv`, as created by the `dev` branch of mgs-workflow.\n\n```{python}\n#| label: equivalence-of-quality-sequence-stats\n#| echo: true\n#| code-fold: false\npe_quality_seq_stats.equals(full_test_quality_seq_stats)\n```\n\n\nPlotting the mean phred score (@fig-quality-sequence-stats-comparison), the single-read output looks similar to the fwd reads of the paired-end output. But they don't look exactly the same!\n```{python}\n#| label: fig-quality-sequence-stats-comparison\n#| echo: false\n\nfig, axs = plt.subplots(2, 1, dpi=300, figsize=(10, 8))\nsns.lineplot(data=se_quality_seq_stats, x='mean_phred_score', y='n_sequences', hue='stage', ax=axs[0],units=\"sample\", estimator=None, legend=True)\n\nplt.subplots_adjust(hspace=0.3)\n\n\nsns.lineplot(data=pe_quality_seq_stats, x='mean_phred_score', y='n_sequences', hue='stage', ax=axs[1], style=\"read_pair\", units=\"sample\", estimator=None, legend=True)\n\naxs[0].set_title('Single-End Quality Sequence Stats')\naxs[1].set_title('Paired-End Quality Sequence Stats')\n\nfor ax in axs:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.set_xlim(0, 40)\n    ax.set_ylim(0, 7000)\n```\n\nThe difference lies in there being more cleaned reads in the single-read run, vs cleaned reads in the forward-reads of the paired-end run. This matches with what we've seen under \"Assessing basic stats for both raw and cleaned reads\".\n\n\n```{python}\n#| label: fig-quality-cleaned-single-vs-forward\n#| echo: false\n#|\n\npe_cleaned_fwd = pe_quality_seq_stats[(pe_quality_seq_stats['read_pair'] == 1) & (pe_quality_seq_stats['stage'] == 'cleaned')]\n\nse_cleaned = se_quality_seq_stats[se_quality_seq_stats['stage'] == 'cleaned']\n\nse_cleaned = se_cleaned.copy()\npe_cleaned_fwd = pe_cleaned_fwd.copy()\n\nse_cleaned['read_type'] = 'single'\npe_cleaned_fwd['read_type'] = 'paired'\nmerged_cleaned = pd.concat([se_cleaned, pe_cleaned_fwd], ignore_index=True)\n\nmean_phred_paired = merged_cleaned[merged_cleaned['read_type'] == 'paired']['mean_phred_score'].mean()\nmean_phred_single = merged_cleaned[merged_cleaned['read_type'] == 'single']['mean_phred_score'].mean()\n\n\nfig, ax = plt.subplots(dpi=300, figsize=(10, 4))\nsns.lineplot(data=merged_cleaned, x='mean_phred_score', y='n_sequences', hue='read_type', ax=ax,units=\"sample\", estimator=None, legend=True, color='blue')\n\n\n\n\n\n```","srcMarkdownNoYaml":"\n\nI'm adapting mgs-workflow to take in single-read data. Here I'm checking if i) the output of the single-read version looks as expected, and if ii) the output of the paired-end version is the same as the original version.\n\nThe single-end dataset simply consists of the forward reads of our usual test dataset. Additionally, I work with the full test dataset, run on the `single-read-raw` pipeline with read_type set to `paired_end`, and the full output of running the usual test dataset with the `dev` branch of `mgs-workflow`.\n```{python}\n#| label: load-packages\n#| include: false\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n\n```{python}\n#| label: data-paths\n\nsingle_read_dir = \"mgs-results/test_single_read\"\npaired_read_dir = \"mgs-results/test_paired_end\"\ntest_dir = \"mgs-results/test\"\nfull_test_dir = \"mgs-results/test-full\"\n\nse_output_dir = os.path.join(single_read_dir, \"output\")\npe_output_dir = os.path.join(paired_read_dir, \"output\")\ntest_output_dir = os.path.join(test_dir, \"output\")\nfull_test_output_dir = os.path.join(full_test_dir, \"output\")\n\nse_results_dir = os.path.join(se_output_dir, \"results\")\npe_results_dir = os.path.join(pe_output_dir, \"results\")\ntest_results_dir = os.path.join(test_output_dir, \"results\")\nfull_test_results_dir = os.path.join(full_test_output_dir, \"results\")\n\nse_qc_dir = os.path.join(se_results_dir, \"qc\")\npe_qc_dir = os.path.join(pe_results_dir, \"qc\")\ntest_qc_dir = os.path.join(test_results_dir, \"qc\")\nfull_test_qc_dir = os.path.join(full_test_results_dir, \"qc\")\n\nse_basic_stats_path = os.path.join(se_qc_dir, \"qc_basic_stats.tsv.gz\")\nse_adapter_stats_path = os.path.join(se_qc_dir, \"qc_adapter_stats.tsv.gz\")\nse_quality_base_stats_path = os.path.join(se_qc_dir, \"qc_quality_base_stats.tsv.gz\")\nse_quality_seq_stats_path = os.path.join(se_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n\n\n\npe_basic_stats_path = os.path.join(pe_qc_dir, \"qc_basic_stats.tsv.gz\")\npe_adapter_stats_path = os.path.join(pe_qc_dir, \"qc_adapter_stats.tsv.gz\")\npe_quality_base_stats_path = os.path.join(pe_qc_dir, \"qc_quality_base_stats.tsv.gz\")\npe_quality_seq_stats_path = os.path.join(pe_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n\n\ntest_basic_stats_path = os.path.join(test_qc_dir, \"qc_basic_stats.tsv.gz\")\ntest_adapter_stats_path = os.path.join(test_qc_dir, \"qc_adapter_stats.tsv.gz\")\ntest_quality_base_stats_path = os.path.join(test_qc_dir, \"qc_quality_base_stats.tsv.gz\")\ntest_quality_seq_stats_path = os.path.join(test_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n\nfull_test_basic_stats_path = os.path.join(full_test_qc_dir, \"qc_basic_stats.tsv.gz\")\nfull_test_adapter_stats_path = os.path.join(full_test_qc_dir, \"qc_adapter_stats.tsv.gz\")\nfull_test_quality_base_stats_path = os.path.join(full_test_qc_dir, \"qc_quality_base_stats.tsv.gz\")\nfull_test_quality_seq_stats_path = os.path.join(full_test_qc_dir, \"qc_quality_sequence_stats.tsv.gz\")\n```\n\n# Assessing basic stats for both raw and cleaned reads\n\nFirst, we can check if the paired-end version of `single-read-raw` is identical to the original paired-end version. It is.\n\n```{python}\n#| label: load-basic-stats\nse_basic_stats = pd.read_csv(se_basic_stats_path, sep='\\t')\npe_basic_stats = pd.read_csv(pe_basic_stats_path, sep='\\t')\ntest_basic_stats = pd.read_csv(test_basic_stats_path, sep='\\t')\nfull_test_basic_stats = pd.read_csv(full_test_basic_stats_path, sep='\\t')\n```\n\n```{python}\n#| label: check-equivalence-of-paired-read-data\n#| echo: true\n#| code-fold: false\n\npe_basic_stats.equals(full_test_basic_stats)\n\n```\n\n\nNow, let's compare the basic stats of the single-read version to the paired-end version. What we see in @tbl-compare-base-pairs is that the the paired-end cleaned samples loses more base pairs than the single-read cleaned samples during cleaning. This is partly explained by the loss of substantially more reads in the paired-end version, as shown in @tbl-compare-read-pairs.\n\nMy current hypothesis is that the reverse reads are very low quality, where FASTP drops them, and thus also drops the forward reads.\n\n```{python}\n#| label: tbl-compare-base-pairs\n#| tbl-cap: Comparison of n_bases_approx between single-read and paired-end versions\n\n\nse_basic_stats[\"sample\"] = se_basic_stats[\"sample\"].str.replace(\"230926EsvD23\", \"230926Esv_D23\")\n\n\n# print(pe_basic_stats)\n\ncombined_df = se_basic_stats[[\"sample\", \"n_bases_approx\", \"stage\", \"n_read_pairs\"]].merge(\n    pe_basic_stats[[\"sample\", \"n_bases_approx\", \"stage\", \"n_read_pairs\"]],\n    on=[\"sample\", \"stage\"],\n    suffixes=[\"_single\", \"_paired\"]\n)\n\ncombined_df[\"ratio_bases\"] = round((combined_df[\"n_bases_approx_paired\"] / combined_df[\"n_bases_approx_single\"]) , 2)\ncombined_df[\"ratio_read_pairs\"] = round(combined_df[\"n_read_pairs_paired\"] / combined_df[\"n_read_pairs_single\"], 2)\n\n# Order columns\ncombined_df_base_pairs = combined_df[[\"sample\", \"stage\", \"n_bases_approx_single\", \"n_bases_approx_paired\", \"ratio_bases\"]]\n# Display the result\ncombined_df_base_pairs\n\n```\n\n\n```{python}\n#| label: tbl-compare-read-pairs\n#| tbl-cap: Comparison of n_read_pairs between single-read and paired-end versions\n\ncombined_df_read_pairs = combined_df[[\"sample\", \"stage\", \"n_read_pairs_single\", \"n_read_pairs_paired\", \"ratio_read_pairs\"]]\n\n\ncombined_df_read_pairs\n```\n\n\n\n# Comparing output of adapter stats\n\n```{python}\n#| label: load-adapter-stats\n#| echo: false\ntest_adapter_stats = pd.read_csv(test_adapter_stats_path, sep='\\t')\nse_adapter_stats = pd.read_csv(se_adapter_stats_path, sep='\\t')\npe_adapter_stats = pd.read_csv(pe_adapter_stats_path, sep='\\t')\nfull_test_adapter_stats = pd.read_csv(full_test_adapter_stats_path, sep='\\t')\n\n```\n\nAgain, the paired-end output of `single-read-raw` is identical to the original paired-end output of `qc_adapter_stats.tsv`.\n\n```{python}\n#| label: check-equivalence-of-adapter-stats\n#| echo: true\n#| code-fold: false\npe_adapter_stats.equals(full_test_adapter_stats)\n```\n\nComparing adapter contamination, the raw_concat percentages are equivalent (though the paired-end version sees more of a step-wise curve).\n\n```{python}\n#| label: fig-adapter-stats-comparison\n#| echo: false\n\nfig, axs = plt.subplots(2, 1, dpi=300, figsize=(10, 8))\nsns.lineplot(data=se_adapter_stats, x='position', y='pc_adapters', hue='stage', ax=axs[0],units=\"sample\", estimator=None, legend=True)\nsns.lineplot(data=pe_adapter_stats, x='position', y='pc_adapters', hue='stage', style=\"read_pair\", ax=axs[1],units=\"sample\", estimator=None, legend=True)\n\n# Set common properties for both subplots\nfor ax in axs:\n    ax.set_xlabel('Position')\n    ax.set_ylabel('% Adapters')\n    ax.grid(True, linestyle='--', alpha=0.7)\n\n# Set titles for each subplot\naxs[0].set_title('Single-End Adapter Stats')\naxs[1].set_title('Paired-End Adapter Stats')\n# Remove top and right spines for both subplots\nfor ax in axs:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\n\n# Add a main title to the figure\n\n\nfig.tight_layout()\n```\n\n# Comparing output of quality base stats\n\n```{python}\n#| label: load-quality-base-stats\n#| echo: false\ntest_quality_base_stats = pd.read_csv(test_quality_base_stats_path, sep='\\t')\nse_quality_base_stats = pd.read_csv(se_quality_base_stats_path, sep='\\t')\npe_quality_base_stats = pd.read_csv(pe_quality_base_stats_path, sep='\\t')\nfull_test_quality_base_stats = pd.read_csv(full_test_quality_base_stats_path, sep='\\t')\n```\n\nAgain, the paired-end output of `single-read-raw` is identical to the original paired-end output of `qc_quality_base_stats.tsv`.\n\n```{python}\n#| label: equivalence-of-quality-base-stats\n#| echo: true\n#| code-fold: false\n#|\npe_quality_base_stats.equals(full_test_quality_base_stats)\n```\n\nAs expected, the single-read version looks very similar to the first read pair of the paired-end version.\n\n```{python}\n#| label: fig-quality-base-stats-comparison\n#| echo: false\nfig, axs = plt.subplots(2, 1, dpi=300, figsize=(10, 8))\n\nsns.lineplot(data=se_quality_base_stats, x='position', y='mean_phred_score', hue='stage', style=\"read_pair\", units=\"sample\", ax=axs[0],estimator=None, legend=True)\n\nsns.lineplot(data=pe_quality_base_stats, x='position', y='mean_phred_score', hue='stage', style=\"read_pair\", units=\"sample\", ax=axs[1],estimator=None, legend=True)\n\nfor ax in axs:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n\nplt.subplots_adjust(hspace=0.3)\n\n\naxs[0].set_title('Single-End Quality Base Stats')\naxs[1].set_title('Paired-End Quality Base Stats')\n\n```\n\n\n# Comparing output of quality sequence stats\n\n```{python}\n#| label: load-quality-sequence-stats\n#| echo: false\ntest_quality_seq_stats = pd.read_csv(test_quality_seq_stats_path, sep='\\t')\nse_quality_seq_stats = pd.read_csv(se_quality_seq_stats_path, sep='\\t')\npe_quality_seq_stats = pd.read_csv(pe_quality_seq_stats_path, sep='\\t')\nfull_test_quality_seq_stats = pd.read_csv(full_test_quality_seq_stats_path, sep='\\t')\n```\n\nAgain, the paired-end output of `single-read-raw` is identical to `qc_quality_sequence_stats.tsv`, as created by the `dev` branch of mgs-workflow.\n\n```{python}\n#| label: equivalence-of-quality-sequence-stats\n#| echo: true\n#| code-fold: false\npe_quality_seq_stats.equals(full_test_quality_seq_stats)\n```\n\n\nPlotting the mean phred score (@fig-quality-sequence-stats-comparison), the single-read output looks similar to the fwd reads of the paired-end output. But they don't look exactly the same!\n```{python}\n#| label: fig-quality-sequence-stats-comparison\n#| echo: false\n\nfig, axs = plt.subplots(2, 1, dpi=300, figsize=(10, 8))\nsns.lineplot(data=se_quality_seq_stats, x='mean_phred_score', y='n_sequences', hue='stage', ax=axs[0],units=\"sample\", estimator=None, legend=True)\n\nplt.subplots_adjust(hspace=0.3)\n\n\nsns.lineplot(data=pe_quality_seq_stats, x='mean_phred_score', y='n_sequences', hue='stage', ax=axs[1], style=\"read_pair\", units=\"sample\", estimator=None, legend=True)\n\naxs[0].set_title('Single-End Quality Sequence Stats')\naxs[1].set_title('Paired-End Quality Sequence Stats')\n\nfor ax in axs:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.set_xlim(0, 40)\n    ax.set_ylim(0, 7000)\n```\n\nThe difference lies in there being more cleaned reads in the single-read run, vs cleaned reads in the forward-reads of the paired-end run. This matches with what we've seen under \"Assessing basic stats for both raw and cleaned reads\".\n\n\n```{python}\n#| label: fig-quality-cleaned-single-vs-forward\n#| echo: false\n#|\n\npe_cleaned_fwd = pe_quality_seq_stats[(pe_quality_seq_stats['read_pair'] == 1) & (pe_quality_seq_stats['stage'] == 'cleaned')]\n\nse_cleaned = se_quality_seq_stats[se_quality_seq_stats['stage'] == 'cleaned']\n\nse_cleaned = se_cleaned.copy()\npe_cleaned_fwd = pe_cleaned_fwd.copy()\n\nse_cleaned['read_type'] = 'single'\npe_cleaned_fwd['read_type'] = 'paired'\nmerged_cleaned = pd.concat([se_cleaned, pe_cleaned_fwd], ignore_index=True)\n\nmean_phred_paired = merged_cleaned[merged_cleaned['read_type'] == 'paired']['mean_phred_score'].mean()\nmean_phred_single = merged_cleaned[merged_cleaned['read_type'] == 'single']['mean_phred_score'].mean()\n\n\nfig, ax = plt.subplots(dpi=300, figsize=(10, 4))\nsns.lineplot(data=merged_cleaned, x='mean_phred_score', y='n_sequences', hue='read_type', ax=ax,units=\"sample\", estimator=None, legend=True, color='blue')\n\n\n\n\n\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"svg","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"toc-depth":2,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.10","title":"Checking if single-read version of mgs-workflow works","author":"Simon Grimm","date":"2024-10-23","jupyter":"venv","title-block-banner":"black","crossref":{"fig-title":"Figure","fig-prefix":"Figure","chapters":true}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}