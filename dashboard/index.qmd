---
title: ""
format:
  html:
    code-fold: true
    # code-tools: true
    # code-link: true
    df-print: paged
    fig-format: svg
    # crossref:
    #   fig-title: Figure
    #   fig-prefix: Figure
    grid:
      body-width: 1200px
      sidebar-width: 200px
      margin-width: 200px
execute:
  echo: false
jupyter: general_venv
---

```{python}
#| label: load-packages
#| include: false

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import gspread
import plotly.express as px
from dotenv import load_dotenv
from google.oauth2.service_account import Credentials

load_dotenv("../.env")
```

```{python}
#| label: load-and-process-data
#| include: false
#| echo: false

def setup_gsheets():
    scopes = [
        'https://www.googleapis.com/auth/spreadsheets',
    ]
    credentials = Credentials.from_service_account_file(
        os.getenv("GOOGLE_CREDENTIALS_PATH"),
        scopes=scopes
    )
    client = gspread.authorize(credentials)
    return client

def read_samplesheet(sheet_url, sheet_name):
    client = setup_gsheets()
    sample_log = client.open_by_url(sheet_url)
    sheet = sample_log.worksheet(sheet_name)
    data = sheet.get_all_values()
    return pd.DataFrame(data)

def process_data(sheet):
    df = sheet[1:] # Drop empty first row
    df = df.iloc[:, 1:] # Drop index column
    df.columns = df.iloc[0] # Set first row as column names
    df = df[2:] # Drop first two rows (header and NA row)
    df.reset_index(drop=True, inplace=True)
    df = df[df["sample name"] != ""] # Drop rows where sample name is empty
    df = df.rename(columns={
        "collection site": "Collection Site",
        "sampling duration": "Sampling duration",
        "compensation": "Compensation",
        "sample type": "Sample Type",
        "total swabs": "Samples collected",
        "date" : "Date",
    "swabs per hour": "Swabs per hour",
        "date collected": "Date collected"
    })
    df['Date collected'] = pd.to_datetime(df['Date collected'])
    df["Swabs per hour"] = df["Swabs per hour"].astype(int)
    return df

sheet = read_samplesheet(os.getenv("GSHEET_URL"), "Sampling runs")
df = process_data(sheet)
```

## Swab Sampling Recruitment

#### Cumulative number of samples collected

```{python}
#| label: cumulative-samples
#| echo: false

df["cumulative_total_swabs"] = df["Samples collected"].astype(int).cumsum()

fig = px.line(df, x="Date collected", y="cumulative_total_swabs",
    markers=True,
    labels={"Date collected": "", "cumulative_total_swabs": ""},
    color_discrete_sequence=["#5cb2a0"],
    hover_data={
        "Collection Site": True,
        "Compensation": True,
        # "Sample Type": True,
        "cumulative_total_swabs": False,
        "Samples collected": True
    }
)

fig.update_traces(mode='lines+markers', line_width=3, marker_size=10)

fig.update_layout(
    plot_bgcolor='white'
)
fig.update_xaxes(
    mirror=False,
    ticks='outside',
    showline=True,
    linecolor='black',
    gridcolor='lightgrey',
    tickfont=dict(size=16),
)
fig.update_yaxes(
    mirror=False,
    ticks='outside',
    showline=True,
    linecolor='black',
    gridcolor='lightgrey',
    tickfont=dict(size=15),
)
start_date = df["Date collected"].min()
end_date = df["Date collected"].max()

middle_date = start_date + (end_date - start_date) / 2

fig.add_hline(y=750, line_dash="dash", line_color="#5cb2a0")
# fig.add_annotation(
#     x=middle_date,  # Use the calculated middle date
#     y=710,
#     text="Target number of samples",
#     xshift=10,
#     yshift=10,
#     showarrow=False,
#     font_size=17,
#     font=dict(color="#5cb2a0")
# )

fig.update_layout(yaxis_range=[0, 800])

fig.show(config={'displayModeBar': False})
```



#### Sampling run metadata
```{python}
#| label: sampling-run-metadata
#| echo: false

df_columns = [
    'Date',
    'Collection Site',
    # 'Sample Type', # Currenty all nasal swabs, hence not interesting.
    'Compensation',
    'Samples collected',
    'Sampling duration',
    'Swabs per hour',
]

df['Date'] = df['Date collected'].dt.strftime('%B %d, %Y')
df.sort_values(by='Date collected', ascending=False, inplace=True)

df_public = df[df_columns]
df_public = df_public.iloc[:, 0:]
display(df_public.style.hide(axis='index'))

```